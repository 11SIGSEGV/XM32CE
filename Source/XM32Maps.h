//
// Created by anony on 11/05/25.
//

// ReSharper disable CppDFANotInitializedField
#pragma once
#include <bitset>
#include <utility> // For std::move

#include "modules.h"


inline int getMaxStdStrLen() {
    std::string s;
    return std::min(static_cast<long long int>(s.max_size()), static_cast<long long int>(std::numeric_limits<int>::max()));
}

const int STD_STRING_SIZE_LIMIT = getMaxStdStrLen();

/*
const std::set<float> logScaleFreq_201 = {
    20.0, 20.7, 21.4, 22.2, 23.0, 23.8, 24.6, 25.5, 26.4, 27.3, 28.3, 29.2, 30.3, 31.3, 32.4, 33.6, 34.8, 36.0, 37.2,
    38.6, 39.9, 41.3, 42.8, 44.3, 45.8, 47.4, 49.1, 50.8, 52.6, 54.5, 56.4, 58.3, 60.4, 62.5,
    64.7, 67.0, 69.3, 71.8, 74.3, 76.9, 79.6, 82.4, 85.3, 88.3, 91.4, 94.6, 98.0, 101.4, 105.0, 108.7, 112.5, 116.4,
    120.5, 124.7, 129.1, 133.7, 138.4, 143.2, 148.3, 153.5, 158.9, 164.4, 170.2, 176.2, 182.4,
    188.8, 195.4, 202.3, 209.4, 216.8, 224.4, 232.3, 240.5, 248.9, 257.6, 266.7, 276.1, 285.8, 295.8, 306.2, 317.0,
    328.1, 339.6, 351.6, 363.9, 376.7, 390.0, 403.7, 417.9, 432.5, 447.7, 463.5, 479.8, 496.6,
    514.1, 532.1, 550.8, 570.2, 590.2, 611.0, 632.5, 654.7, 677.7, 701.5, 726.2, 751.7, 778.1, 805.4, 833.7, 863.0,
    893.4, 924.8, 957.3, 990.9, 1020.0, 1060.0, 1090.0, 1130.0, 1170.0, 1210.0, 1260.0, 1300.0,
    1350.0, 1390.0, 1440.0, 1490.0, 1550.0, 1600.0, 1660.0, 1720.0, 1780.0, 1840.0, 1910.0, 1970.0, 2040.0, 2110.0,
    2190.0, 2270.0, 2340.0, 2430.0, 2510.0, 2600.0, 2690.0, 2790.0, 2890.0, 2990.0, 3090.0,
    3200.0, 3310.0, 3430.0, 3550.0, 3680.0, 3810.0, 3940.0, 4080.0, 4220.0, 4370.0, 4520.0, 4680.0, 4850.0, 5020.0,
    5200.0, 5380.0, 5570.0, 5760.0, 5970.0, 6180.0, 6390.0, 6620.0, 6850.0, 7090.0, 7340.0,
    7600.0, 7870.0, 8140.0, 8430.0, 8730.0, 9030.0, 9350.0, 9680.0, 10020.0, 10370.0, 10740.0, 11110.0, 11500.0,
    11910.0, 12330.0, 12760.0, 13210.0, 13670.0, 14150.0, 14650.0, 15170.0, 15700.0, 16250.0, 16820.0,
    17410.0, 18030.0, 18660.0, 19320.0, 20000.0
};

const std::set<float> logScaleFreq_121 = {
    20.0, 21.2, 22.4, 23.8, 25.2, 26.7, 28.3, 29.9, 31.7, 33.6, 35.6, 37.7, 39.9, 42.3, 44.8, 47.4, 50.2, 53.2, 56.4,
    59.7, 63.2, 67.0, 71.0, 75.2, 79.6, 84.3, 89.3, 94.6, 100.2, 106.2, 112.5, 119.1, 126.2,
    133.7, 141.6, 150.0, 158.9, 168.3, 178.3, 188.8, 200.0, 211.9, 224.4, 237.7, 251.8, 266.7, 282.5, 299.2, 317.0,
    335.8, 355.7, 376.7, 399.1, 422.7, 447.7, 474.3, 502.4, 532.1, 563.7, 597.1, 632.5, 669.9,
    709.6, 751.7, 796.2, 843.4, 893.4, 946.3, 1000.0, 1060.0, 1120.0, 1190.0, 1260.0, 1330.0, 1410.0, 1490.0, 1580.0,
    1680.0, 1780.0, 1880.0, 2000.0, 2110.0, 2240.0, 2370.0, 2510.0, 2660.0, 2820.0, 2990.0,
    3160.0, 3350.0, 3550.0, 3760.0, 3990.0, 4220.0, 4470.0, 4740.0, 5020.0, 5320.0, 5630.0, 5970.0, 6320.0, 6690.0,
    7090.0, 7510.0, 7960.0, 8430.0, 8930.0, 9460.0, 10020.0, 10610.0, 11240.0, 11910.0, 12610.0,
    13360.0, 14150.0, 14990.0, 15880.0, 16820.0, 17820.0, 18880.0, 20000.0
};

const std::unordered_map<float, float> floatToFreq_201 = {
    {0.0, 20.0}, {0.005, 20.7}, {0.01, 21.4}, {0.015, 22.2}, {0.02, 23.0}, {0.025, 23.8}, {0.03, 24.6}, {0.035, 25.5},
    {0.04, 26.4}, {0.045, 27.3}, {0.05, 28.3}, {0.055, 29.2}, {0.06, 30.3}, {0.065, 31.3},
    {0.07, 32.4}, {0.075, 33.6}, {0.08, 34.8}, {0.085, 36.0}, {0.09, 37.2}, {0.095, 38.6}, {0.1, 39.9}, {0.105, 41.3},
    {0.11, 42.8}, {0.115, 44.3}, {0.12, 45.8}, {0.125, 47.4}, {0.13, 49.1}, {0.135, 50.8},
    {0.14, 52.6}, {0.145, 54.5}, {0.15, 56.4}, {0.155, 58.3}, {0.16, 60.4}, {0.165, 62.5}, {0.17, 64.7}, {0.175, 67.0},
    {0.18, 69.3}, {0.185, 71.8}, {0.19, 74.3}, {0.195, 76.9}, {0.2, 79.6}, {0.205, 82.4},
    {0.21, 85.3}, {0.215, 88.3}, {0.22, 91.4}, {0.225, 94.6}, {0.23, 98.0}, {0.235, 101.4}, {0.24, 105.0},
    {0.245, 108.7}, {0.25, 112.5}, {0.255, 116.4}, {0.26, 120.5}, {0.265, 124.7}, {0.27, 129.1}, {0.275, 133.7},
    {0.28, 138.4}, {0.285, 143.2}, {0.29, 148.3}, {0.295, 153.5}, {0.3, 158.9}, {0.305, 164.4}, {0.31, 170.2},
    {0.315, 176.2}, {0.32, 182.4}, {0.325, 188.8}, {0.33, 195.4}, {0.335, 202.3}, {0.34, 209.4}, {0.345, 216.8},
    {0.35, 224.4}, {0.355, 232.3}, {0.36, 240.5}, {0.365, 248.9}, {0.37, 257.6}, {0.375, 266.7}, {0.38, 276.1},
    {0.385, 285.8}, {0.39, 295.8}, {0.395, 306.2}, {0.4, 317.0}, {0.405, 328.1}, {0.41, 339.6}, {0.415, 351.6},
    {0.42, 363.9}, {0.425, 376.7}, {0.43, 390.0}, {0.435, 403.7}, {0.44, 417.9}, {0.445, 432.5}, {0.45, 447.7},
    {0.455, 463.5}, {0.46, 479.8}, {0.465, 496.6}, {0.47, 514.1}, {0.475, 532.1}, {0.48, 550.8},
    {0.485, 570.2}, {0.49, 590.2}, {0.495, 611.0}, {0.5, 632.5}, {0.505, 654.7}, {0.51, 677.7}, {0.515, 701.5},
    {0.52, 726.2}, {0.525, 751.7}, {0.53, 778.1}, {0.535, 805.4}, {0.54, 833.7}, {0.545, 863.0},
    {0.55, 893.4}, {0.555, 924.8}, {0.56, 957.3}, {0.565, 990.9}, {0.57, 1020.0}, {0.575, 1060.0}, {0.58, 1090.0},
    {0.585, 1130.0}, {0.59, 1170.0}, {0.595, 1210.0}, {0.6, 1260.0}, {0.605, 1300.0}, {0.61, 1350.0},
    {0.615, 1390.0}, {0.62, 1440.0}, {0.625, 1490.0}, {0.63, 1550.0}, {0.635, 1600.0}, {0.64, 1660.0}, {0.645, 1720.0},
    {0.65, 1780.0}, {0.655, 1840.0}, {0.66, 1910.0}, {0.665, 1970.0}, {0.67, 2040.0}, {0.675, 2110.0},
    {0.68, 2190.0}, {0.685, 2270.0}, {0.69, 2340.0}, {0.695, 2430.0}, {0.7, 2510.0}, {0.705, 2600.0}, {0.71, 2690.0},
    {0.715, 2790.0}, {0.72, 2890.0}, {0.725, 2990.0}, {0.73, 3090.0}, {0.735, 3200.0}, {0.74, 3310.0},
    {0.745, 3430.0}, {0.75, 3550.0}, {0.755, 3680.0}, {0.76, 3810.0}, {0.765, 3940.0}, {0.77, 4080.0}, {0.775, 4220.0},
    {0.78, 4370.0}, {0.785, 4520.0}, {0.79, 4680.0}, {0.795, 4850.0}, {0.8, 5020.0}, {0.805, 5200.0},
    {0.81, 5380.0}, {0.815, 5570.0}, {0.82, 5760.0}, {0.825, 5970.0}, {0.83, 6180.0}, {0.835, 6390.0}, {0.84, 6620.0},
    {0.845, 6850.0}, {0.85, 7090.0}, {0.855, 7340.0}, {0.86, 7600.0}, {0.865, 7870.0}, {0.87, 8140.0},
    {0.875, 8430.0}, {0.88, 8730.0}, {0.885, 9030.0}, {0.89, 9350.0}, {0.895, 9680.0}, {0.9, 10020.0}, {0.905, 10370.0},
    {0.91, 10740.0}, {0.915, 11110.0}, {0.92, 11500.0}, {0.925, 11910.0}, {0.93, 12330.0},
    {0.935, 12760.0}, {0.94, 13210.0}, {0.945, 13670.0}, {0.95, 14150.0}, {0.955, 14650.0}, {0.96, 15170.0},
    {0.965, 15700.0}, {0.97, 16250.0}, {0.975, 16820.0}, {0.98, 17410.0}, {0.985, 18030.0}, {0.99, 18660.0},
    {0.995, 19320.0}, {1.0, 20000.0}
};

const std::unordered_map<float, float> freqToFloat_201 = {
    {20.0, 0.0}, {20.7, 0.005}, {21.4, 0.01}, {22.2, 0.015}, {23.0, 0.02}, {23.8, 0.025}, {24.6, 0.03}, {25.5, 0.035},
    {26.4, 0.04}, {27.3, 0.045}, {28.3, 0.05}, {29.2, 0.055}, {30.3, 0.06}, {31.3, 0.065},
    {32.4, 0.07}, {33.6, 0.075}, {34.8, 0.08}, {36.0, 0.085}, {37.2, 0.09}, {38.6, 0.095}, {39.9, 0.1}, {41.3, 0.105},
    {42.8, 0.11}, {44.3, 0.115}, {45.8, 0.12}, {47.4, 0.125}, {49.1, 0.13}, {50.8, 0.135},
    {52.6, 0.14}, {54.5, 0.145}, {56.4, 0.15}, {58.3, 0.155}, {60.4, 0.16}, {62.5, 0.165}, {64.7, 0.17}, {67.0, 0.175},
    {69.3, 0.18}, {71.8, 0.185}, {74.3, 0.19}, {76.9, 0.195}, {79.6, 0.2}, {82.4, 0.205},
    {85.3, 0.21}, {88.3, 0.215}, {91.4, 0.22}, {94.6, 0.225}, {98.0, 0.23}, {101.4, 0.235}, {105.0, 0.24},
    {108.7, 0.245}, {112.5, 0.25}, {116.4, 0.255}, {120.5, 0.26}, {124.7, 0.265}, {129.1, 0.27}, {133.7, 0.275},
    {138.4, 0.28}, {143.2, 0.285}, {148.3, 0.29}, {153.5, 0.295}, {158.9, 0.3}, {164.4, 0.305}, {170.2, 0.31},
    {176.2, 0.315}, {182.4, 0.32}, {188.8, 0.325}, {195.4, 0.33}, {202.3, 0.335}, {209.4, 0.34}, {216.8, 0.345},
    {224.4, 0.35}, {232.3, 0.355}, {240.5, 0.36}, {248.9, 0.365}, {257.6, 0.37}, {266.7, 0.375}, {276.1, 0.38},
    {285.8, 0.385}, {295.8, 0.39}, {306.2, 0.395}, {317.0, 0.4}, {328.1, 0.405}, {339.6, 0.41}, {351.6, 0.415},
    {363.9, 0.42}, {376.7, 0.425}, {390.0, 0.43}, {403.7, 0.435}, {417.9, 0.44}, {432.5, 0.445}, {447.7, 0.45},
    {463.5, 0.455}, {479.8, 0.46}, {496.6, 0.465}, {514.1, 0.47}, {532.1, 0.475}, {550.8, 0.48},
    {570.2, 0.485}, {590.2, 0.49}, {611.0, 0.495}, {632.5, 0.5}, {654.7, 0.505}, {677.7, 0.51}, {701.5, 0.515},
    {726.2, 0.52}, {751.7, 0.525}, {778.1, 0.53}, {805.4, 0.535}, {833.7, 0.54}, {863.0, 0.545},
    {893.4, 0.55}, {924.8, 0.555}, {957.3, 0.56}, {990.9, 0.565}, {1020.0, 0.57}, {1060.0, 0.575}, {1090.0, 0.58},
    {1130.0, 0.585}, {1170.0, 0.59}, {1210.0, 0.595}, {1260.0, 0.6}, {1300.0, 0.605}, {1350.0, 0.61},
    {1390.0, 0.615}, {1440.0, 0.62}, {1490.0, 0.625}, {1550.0, 0.63}, {1600.0, 0.635}, {1660.0, 0.64}, {1720.0, 0.645},
    {1780.0, 0.65}, {1840.0, 0.655}, {1910.0, 0.66}, {1970.0, 0.665}, {2040.0, 0.67}, {2110.0, 0.675},
    {2190.0, 0.68}, {2270.0, 0.685}, {2340.0, 0.69}, {2430.0, 0.695}, {2510.0, 0.7}, {2600.0, 0.705}, {2690.0, 0.71},
    {2790.0, 0.715}, {2890.0, 0.72}, {2990.0, 0.725}, {3090.0, 0.73}, {3200.0, 0.735}, {3310.0, 0.74},
    {3430.0, 0.745}, {3550.0, 0.75}, {3680.0, 0.755}, {3810.0, 0.76}, {3940.0, 0.765}, {4080.0, 0.77}, {4220.0, 0.775},
    {4370.0, 0.78}, {4520.0, 0.785}, {4680.0, 0.79}, {4850.0, 0.795}, {5020.0, 0.8}, {5200.0, 0.805},
    {5380.0, 0.81}, {5570.0, 0.815}, {5760.0, 0.82}, {5970.0, 0.825}, {6180.0, 0.83}, {6390.0, 0.835}, {6620.0, 0.84},
    {6850.0, 0.845}, {7090.0, 0.85}, {7340.0, 0.855}, {7600.0, 0.86}, {7870.0, 0.865}, {8140.0, 0.87},
    {8430.0, 0.875}, {8730.0, 0.88}, {9030.0, 0.885}, {9350.0, 0.89}, {9680.0, 0.895}, {10020.0, 0.9}, {10370.0, 0.905},
    {10740.0, 0.91}, {11110.0, 0.915}, {11500.0, 0.92}, {11910.0, 0.925}, {12330.0, 0.93},
    {12760.0, 0.935}, {13210.0, 0.94}, {13670.0, 0.945}, {14150.0, 0.95}, {14650.0, 0.955}, {15170.0, 0.96},
    {15700.0, 0.965}, {16250.0, 0.97}, {16820.0, 0.975}, {17410.0, 0.98}, {18030.0, 0.985}, {18660.0, 0.99},
    {19320.0, 0.995}, {20000.0, 1.0}
};

const std::unordered_map<float, float> floatToFreq_121 = {
    {0.0, 20.0}, {0.0083, 21.2}, {0.0167, 22.4}, {0.025, 23.8}, {0.0333, 25.2}, {0.0417, 26.7}, {0.05, 28.3},
    {0.0583, 29.9}, {0.0667, 31.7}, {0.075, 33.6}, {0.0833, 35.6}, {0.0917, 37.7}, {0.1, 39.9}, {0.1083, 42.3},
    {0.1167, 44.8}, {0.125, 47.4}, {0.1333, 50.2}, {0.1417, 53.2}, {0.15, 56.4}, {0.1583, 59.7}, {0.1667, 63.2},
    {0.175, 67.0}, {0.1833, 71.0}, {0.1917, 75.2}, {0.2, 79.6}, {0.2083, 84.3}, {0.2167, 89.3},
    {0.225, 94.6}, {0.2333, 100.2}, {0.2417, 106.2}, {0.25, 112.5}, {0.2583, 119.1}, {0.2667, 126.2}, {0.275, 133.7},
    {0.2833, 141.6}, {0.2917, 150.0}, {0.3, 158.9}, {0.3083, 168.3}, {0.3167, 178.3}, {0.325, 188.8},
    {0.3333, 200.0}, {0.3417, 211.9}, {0.35, 224.4}, {0.3583, 237.7}, {0.3667, 251.8}, {0.375, 266.7}, {0.3833, 282.5},
    {0.3917, 299.2}, {0.4, 317.0}, {0.4083, 335.8}, {0.4167, 355.7}, {0.425, 376.7}, {0.4333, 399.1},
    {0.4417, 422.7}, {0.45, 447.7}, {0.4583, 474.3}, {0.4667, 502.4}, {0.475, 532.1}, {0.4833, 563.7}, {0.4917, 597.1},
    {0.5, 632.5}, {0.5083, 669.9}, {0.5167, 709.6}, {0.525, 751.7}, {0.5333, 796.2}, {0.5417, 843.4},
    {0.55, 893.4}, {0.5583, 946.3}, {0.5667, 1000.0}, {0.575, 1060.0}, {0.5833, 1120.0}, {0.5917, 1190.0},
    {0.6, 1260.0}, {0.6083, 1330.0}, {0.6167, 1410.0}, {0.625, 1490.0}, {0.6333, 1580.0}, {0.6417, 1680.0},
    {0.65, 1780.0}, {0.6583, 1880.0}, {0.6667, 2000.0}, {0.675, 2110.0}, {0.6833, 2240.0}, {0.6917, 2370.0},
    {0.7, 2510.0}, {0.7083, 2660.0}, {0.7167, 2820.0}, {0.725, 2990.0}, {0.7333, 3160.0}, {0.7417, 3350.0},
    {0.75, 3550.0}, {0.7583, 3760.0}, {0.7667, 3990.0}, {0.775, 4220.0}, {0.7833, 4470.0}, {0.7917, 4740.0},
    {0.8, 5020.0}, {0.8083, 5320.0}, {0.8167, 5630.0}, {0.825, 5970.0}, {0.8333, 6320.0}, {0.8417, 6690.0},
    {0.85, 7090.0}, {0.8583, 7510.0}, {0.8667, 7960.0}, {0.875, 8430.0}, {0.8833, 8930.0}, {0.8917, 9460.0},
    {0.9, 10020.0}, {0.9083, 10610.0}, {0.9167, 11240.0}, {0.925, 11910.0}, {0.9333, 12610.0}, {0.9417, 13360.0},
    {0.95, 14150.0}, {0.9583, 14990.0}, {0.9667, 15880.0}, {0.975, 16820.0}, {0.9833, 17820.0}, {0.9917, 18880.0},
    {1.0, 20000.0}
};

const std::unordered_map<float, float> freqToFloat_121 = {
    {20.0, 0.0}, {21.2, 0.0083}, {22.4, 0.0167}, {23.8, 0.025}, {25.2, 0.0333}, {26.7, 0.0417}, {28.3, 0.05},
    {29.9, 0.0583}, {31.7, 0.0667}, {33.6, 0.075}, {35.6, 0.0833}, {37.7, 0.0917}, {39.9, 0.1}, {42.3, 0.1083},
    {44.8, 0.1167}, {47.4, 0.125}, {50.2, 0.1333}, {53.2, 0.1417}, {56.4, 0.15}, {59.7, 0.1583}, {63.2, 0.1667},
    {67.0, 0.175}, {71.0, 0.1833}, {75.2, 0.1917}, {79.6, 0.2}, {84.3, 0.2083}, {89.3, 0.2167},
    {94.6, 0.225}, {100.2, 0.2333}, {106.2, 0.2417}, {112.5, 0.25}, {119.1, 0.2583}, {126.2, 0.2667}, {133.7, 0.275},
    {141.6, 0.2833}, {150.0, 0.2917}, {158.9, 0.3}, {168.3, 0.3083}, {178.3, 0.3167}, {188.8, 0.325},
    {200.0, 0.3333}, {211.9, 0.3417}, {224.4, 0.35}, {237.7, 0.3583}, {251.8, 0.3667}, {266.7, 0.375}, {282.5, 0.3833},
    {299.2, 0.3917}, {317.0, 0.4}, {335.8, 0.4083}, {355.7, 0.4167}, {376.7, 0.425}, {399.1, 0.4333},
    {422.7, 0.4417}, {447.7, 0.45}, {474.3, 0.4583}, {502.4, 0.4667}, {532.1, 0.475}, {563.7, 0.4833}, {597.1, 0.4917},
    {632.5, 0.5}, {669.9, 0.5083}, {709.6, 0.5167}, {751.7, 0.525}, {796.2, 0.5333}, {843.4, 0.5417},
    {893.4, 0.55}, {946.3, 0.5583}, {1000.0, 0.5667}, {1060.0, 0.575}, {1120.0, 0.5833}, {1190.0, 0.5917},
    {1260.0, 0.6}, {1330.0, 0.6083}, {1410.0, 0.6167}, {1490.0, 0.625}, {1580.0, 0.6333}, {1680.0, 0.6417},
    {1780.0, 0.65}, {1880.0, 0.6583}, {2000.0, 0.6667}, {2110.0, 0.675}, {2240.0, 0.6833}, {2370.0, 0.6917},
    {2510.0, 0.7}, {2660.0, 0.7083}, {2820.0, 0.7167}, {2990.0, 0.725}, {3160.0, 0.7333}, {3350.0, 0.7417},
    {3550.0, 0.75}, {3760.0, 0.7583}, {3990.0, 0.7667}, {4220.0, 0.775}, {4470.0, 0.7833}, {4740.0, 0.7917},
    {5020.0, 0.8}, {5320.0, 0.8083}, {5630.0, 0.8167}, {5970.0, 0.825}, {6320.0, 0.8333}, {6690.0, 0.8417},
    {7090.0, 0.85}, {7510.0, 0.8583}, {7960.0, 0.8667}, {8430.0, 0.875}, {8930.0, 0.8833}, {9460.0, 0.8917},
    {10020.0, 0.9}, {10610.0, 0.9083}, {11240.0, 0.9167}, {11910.0, 0.925}, {12610.0, 0.9333}, {13360.0, 0.9417},
    {14150.0, 0.95}, {14990.0, 0.9583}, {15880.0, 0.9667}, {16820.0, 0.975}, {17820.0, 0.9833}, {18880.0, 0.9917},
    {20000.0, 1.0}
};

const std::set<float> qFactors = {
    10.0, 9.5, 9.1, 8.6, 8.2, 7.8, 7.4, 7.1, 6.7, 6.4, 6.1, 5.8, 5.5, 5.3, 5.0, 4.8, 4.5, 4.3, 4.1, 3.9, 3.7, 3.5, 3.4,
    3.2, 3.1, 2.9, 2.8, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4,
    1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3
};

const std::unordered_map<float, float> floatToQ = {
    {0.0, 10.0}, {0.0141, 9.5}, {0.0282, 9.1}, {0.0423, 8.6}, {0.0563, 8.2}, {0.0704, 7.8}, {0.0845, 7.4},
    {0.0986, 7.1}, {0.1127, 6.7}, {0.1268, 6.4}, {0.1408, 6.1}, {0.1549, 5.8}, {0.169, 5.5}, {0.1831, 5.3},
    {0.1972, 5.0}, {0.2113, 4.8}, {0.2254, 4.5}, {0.2394, 4.3}, {0.2535, 4.1}, {0.2676, 3.9}, {0.2817, 3.7},
    {0.2958, 3.5}, {0.3099, 3.4}, {0.3239, 3.2}, {0.338, 3.1}, {0.3521, 2.9}, {0.3662, 2.8}, {0.3803, 2.6},
    {0.3944, 2.5}, {0.4085, 2.4}, {0.4225, 2.3}, {0.4366, 2.2}, {0.4507, 2.1}, {0.4648, 2.0}, {0.4789, 1.9},
    {0.493, 1.8}, {0.507, 1.7}, {0.5211, 1.6}, {0.5352, 1.5}, {0.5493, 1.5}, {0.5634, 1.4}, {0.5775, 1.3},
    {0.5915, 1.3}, {0.6056, 1.2}, {0.6197, 1.1}, {0.6338, 1.1}, {0.6479, 1.0}, {0.662, 1.0}, {0.6761, 0.9},
    {0.6901, 0.9}, {0.7042, 0.8}, {0.7183, 0.8}, {0.7324, 0.8}, {0.7465, 0.7}, {0.7606, 0.7}, {0.7746, 0.7},
    {0.7887, 0.6}, {0.8028, 0.6}, {0.8169, 0.6}, {0.831, 0.5}, {0.8451, 0.5}, {0.8592, 0.5}, {0.8732, 0.5},
    {0.8873, 0.4}, {0.9014, 0.4}, {0.9155, 0.4}, {0.9296, 0.4}, {0.9437, 0.4}, {0.9577, 0.3}, {0.9718, 0.3},
    {0.9859, 0.3}, {1.0, 0.3}
};

const std::unordered_map<float, float> qToFloat = {
    {10.0, 0.0}, {9.5, 0.0141}, {9.1, 0.0282}, {8.6, 0.0423}, {8.2, 0.0563}, {7.8, 0.0704}, {7.4, 0.0845},
    {7.1, 0.0986}, {6.7, 0.1127}, {6.4, 0.1268}, {6.1, 0.1408}, {5.8, 0.1549}, {5.5, 0.169}, {5.3, 0.1831},
    {5.0, 0.1972}, {4.8, 0.2113}, {4.5, 0.2254}, {4.3, 0.2394}, {4.1, 0.2535}, {3.9, 0.2676}, {3.7, 0.2817},
    {3.5, 0.2958}, {3.4, 0.3099}, {3.2, 0.3239}, {3.1, 0.338}, {2.9, 0.3521}, {2.8, 0.3662}, {2.6, 0.3803},
    {2.5, 0.3944}, {2.4, 0.4085}, {2.3, 0.4225}, {2.2, 0.4366}, {2.1, 0.4507}, {2.0, 0.4648}, {1.9, 0.4789},
    {1.8, 0.493}, {1.7, 0.507}, {1.6, 0.5211}, {1.5, 0.5352}, {1.4, 0.5634}, {1.3, 0.5775}, {1.2, 0.6056},
    {1.1, 0.6197}, {1.0, 0.6479}, {0.9, 0.6761}, {0.8, 0.7042}, {0.7, 0.7465}, {0.6, 0.7887}, {0.5, 0.831},
    {0.4, 0.8873}, {0.3, 0.9577}
};

const std::set<float> hold = {
    0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.13, 0.14, 0.16, 0.18, 0.2, 0.22, 0.25, 0.28, 0.32,
    0.36, 0.4, 0.45, 0.5, 0.56, 0.63, 0.71, 0.8, 0.89, 1.0, 1.12, 1.26, 1.42, 1.59, 1.78, 2.0,
    2.24, 2.52, 2.83, 3.17, 3.56, 3.99, 4.48, 5.02, 5.64, 6.32, 7.1, 7.96, 8.93, 10.0, 11.2, 12.6, 14.1, 15.8, 17.8,
    20.0, 22.4, 25.1, 28.2, 31.7, 35.5, 39.9, 44.7, 50.2, 56.3, 63.2, 70.9, 79.6, 89.3, 100.0,
    112.0, 126.0, 141.0, 158.0, 178.0, 200.0, 224.0, 251.0, 282.0, 316.0, 355.0, 399.0, 447.0, 502.0, 563.0, 632.0,
    709.0, 796.0, 893.0, 1002.0, 1124.0, 1261.0, 1415.0, 1588.0, 1782.0, 2000.0
};

const std::unordered_map<float, float> floatToHold = {
    {0.0, 0.02}, {0.01, 0.02}, {0.02, 0.03}, {0.03, 0.03}, {0.04, 0.03}, {0.05, 0.04}, {0.06, 0.04}, {0.07, 0.04},
    {0.08, 0.05}, {0.09, 0.06}, {0.1, 0.06}, {0.11, 0.07}, {0.12, 0.08}, {0.13, 0.09}, {0.14, 0.1},
    {0.15, 0.11}, {0.16, 0.13}, {0.17, 0.14}, {0.18, 0.16}, {0.19, 0.18}, {0.2, 0.2}, {0.21, 0.22}, {0.22, 0.25},
    {0.23, 0.28}, {0.24, 0.32}, {0.25, 0.36}, {0.26, 0.4}, {0.27, 0.45}, {0.28, 0.5}, {0.29, 0.56},
    {0.3, 0.63}, {0.31, 0.71}, {0.32, 0.8}, {0.33, 0.89}, {0.34, 1.0}, {0.35, 1.12}, {0.36, 1.26}, {0.37, 1.42},
    {0.38, 1.59}, {0.39, 1.78}, {0.4, 2.0}, {0.41, 2.24}, {0.42, 2.52}, {0.43, 2.83}, {0.44, 3.17},
    {0.45, 3.56}, {0.46, 3.99}, {0.47, 4.48}, {0.48, 5.02}, {0.49, 5.64}, {0.5, 6.32}, {0.51, 7.1}, {0.52, 7.96},
    {0.53, 8.93}, {0.54, 10.0}, {0.55, 11.2}, {0.56, 12.6}, {0.57, 14.1}, {0.58, 15.8}, {0.59, 17.8},
    {0.6, 20.0}, {0.61, 22.4}, {0.62, 25.1}, {0.63, 28.2}, {0.64, 31.7}, {0.65, 35.5}, {0.66, 39.9}, {0.67, 44.7},
    {0.68, 50.2}, {0.69, 56.3}, {0.7, 63.2}, {0.71, 70.9}, {0.72, 79.6}, {0.73, 89.3}, {0.74, 100.0},
    {0.75, 112.0}, {0.76, 126.0}, {0.77, 141.0}, {0.78, 158.0}, {0.79, 178.0}, {0.8, 200.0}, {0.81, 224.0},
    {0.82, 251.0}, {0.83, 282.0}, {0.84, 316.0}, {0.85, 355.0}, {0.86, 399.0}, {0.87, 447.0}, {0.88, 502.0},
    {0.89, 563.0}, {0.9, 632.0}, {0.91, 709.0}, {0.92, 796.0}, {0.93, 893.0}, {0.94, 1002.0}, {0.95, 1124.0},
    {0.96, 1261.0}, {0.97, 1415.0}, {0.98, 1588.0}, {0.99, 1782.0}, {1.0, 2000.0}
};


const std::unordered_map<float, float> holdToFloat = {
    {0.02, 0.0}, {0.02, 0.01}, {0.03, 0.02}, {0.03, 0.03}, {0.03, 0.04}, {0.04, 0.05}, {0.04, 0.06}, {0.04, 0.07},
    {0.05, 0.08}, {0.06, 0.09}, {0.06, 0.1}, {0.07, 0.11}, {0.08, 0.12}, {0.09, 0.13}, {0.1, 0.14},
    {0.11, 0.15}, {0.13, 0.16}, {0.14, 0.17}, {0.16, 0.18}, {0.18, 0.19}, {0.2, 0.2}, {0.22, 0.21}, {0.25, 0.22},
    {0.28, 0.23}, {0.32, 0.24}, {0.36, 0.25}, {0.4, 0.26}, {0.45, 0.27}, {0.5, 0.28}, {0.56, 0.29},
    {0.63, 0.3}, {0.71, 0.31}, {0.8, 0.32}, {0.89, 0.33}, {1.0, 0.34}, {1.12, 0.35}, {1.26, 0.36}, {1.42, 0.37},
    {1.59, 0.38}, {1.78, 0.39}, {2.0, 0.4}, {2.24, 0.41}, {2.52, 0.42}, {2.83, 0.43}, {3.17, 0.44},
    {3.56, 0.45}, {3.99, 0.46}, {4.48, 0.47}, {5.02, 0.48}, {5.64, 0.49}, {6.32, 0.5}, {7.1, 0.51}, {7.96, 0.52},
    {8.93, 0.53}, {10.0, 0.54}, {11.2, 0.55}, {12.6, 0.56}, {14.1, 0.57}, {15.8, 0.58}, {17.8, 0.59},
    {20.0, 0.6}, {22.4, 0.61}, {25.1, 0.62}, {28.2, 0.63}, {31.7, 0.64}, {35.5, 0.65}, {39.9, 0.66}, {44.7, 0.67},
    {50.2, 0.68}, {56.3, 0.69}, {63.2, 0.7}, {70.9, 0.71}, {79.6, 0.72}, {89.3, 0.73}, {100.0, 0.74},
    {112.0, 0.75}, {126.0, 0.76}, {141.0, 0.77}, {158.0, 0.78}, {178.0, 0.79}, {200.0, 0.8}, {224.0, 0.81},
    {251.0, 0.82}, {282.0, 0.83}, {316.0, 0.84}, {355.0, 0.85}, {399.0, 0.86}, {447.0, 0.87}, {502.0, 0.88},
    {563.0, 0.89}, {632.0, 0.9}, {709.0, 0.91}, {796.0, 0.92}, {893.0, 0.93}, {1002.0, 0.94}, {1124.0, 0.95},
    {1261.0, 0.96}, {1415.0, 0.97}, {1588.0, 0.98}, {1782.0, 0.99}, {2000.0, 1.0}
};

const std::set<int> release = {
    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 30, 32, 35, 37, 40, 42, 45, 49, 52,
    55, 59, 63, 68, 72, 77, 83, 89, 95, 101, 108, 116, 124, 132, 141, 151, 162, 173, 185,
    198, 211, 226, 241, 258, 276, 295, 315, 337, 361, 385, 412, 441, 471, 504, 538, 576, 615, 658, 703, 752, 804, 860,
    919, 983, 1051, 1123, 1201, 1284, 1373, 1468, 1569, 1677, 1793, 1917, 2050, 2192, 2343,
    2505, 2678, 2864, 3062, 3273, 3499, 3741, 4000
};


const std::unordered_map<float, int> floatToRelease = {
    {0.0, 5}, {0.01, 5}, {0.02, 6}, {0.03, 6}, {0.04, 7}, {0.05, 7}, {0.06, 7}, {0.07, 8}, {0.08, 9}, {0.09, 9},
    {0.1, 10}, {0.11, 10}, {0.12, 11}, {0.13, 12}, {0.14, 13}, {0.15, 14}, {0.16, 15}, {0.17, 16},
    {0.18, 17}, {0.19, 18}, {0.2, 19}, {0.21, 20}, {0.22, 22}, {0.23, 23}, {0.24, 25}, {0.25, 27}, {0.26, 28},
    {0.27, 30}, {0.28, 32}, {0.29, 35}, {0.3, 37}, {0.31, 40}, {0.32, 42}, {0.33, 45}, {0.34, 49},
    {0.35, 52}, {0.36, 55}, {0.37, 59}, {0.38, 63}, {0.39, 68}, {0.4, 72}, {0.41, 77}, {0.42, 83}, {0.43, 89},
    {0.44, 95}, {0.45, 101}, {0.46, 108}, {0.47, 116}, {0.48, 124}, {0.49, 132}, {0.5, 141}, {0.51, 151},
    {0.52, 162}, {0.53, 173}, {0.54, 185}, {0.55, 198}, {0.56, 211}, {0.57, 226}, {0.58, 241}, {0.59, 258}, {0.6, 276},
    {0.61, 295}, {0.62, 315}, {0.63, 337}, {0.64, 361}, {0.65, 385}, {0.66, 412}, {0.67, 441},
    {0.68, 471}, {0.69, 504}, {0.7, 538}, {0.71, 576}, {0.72, 615}, {0.73, 658}, {0.74, 703}, {0.75, 752}, {0.76, 804},
    {0.77, 860}, {0.78, 919}, {0.79, 983}, {0.8, 1051}, {0.81, 1123}, {0.82, 1201}, {0.83, 1284},
    {0.84, 1373}, {0.85, 1468}, {0.86, 1569}, {0.87, 1677}, {0.88, 1793}, {0.89, 1917}, {0.9, 2050}, {0.91, 2192},
    {0.92, 2343}, {0.93, 2505}, {0.94, 2678}, {0.95, 2864}, {0.96, 3062}, {0.97, 3273}, {0.98, 3499},
    {0.99, 3741}, {1.0, 4000},
};

const std::unordered_map<int, float> releaseToFloat = {
    {5, 0.0}, {5, 0.01}, {6, 0.02}, {6, 0.03}, {7, 0.04}, {7, 0.05}, {7, 0.06}, {8, 0.07}, {9, 0.08}, {9, 0.09},
    {10, 0.1}, {10, 0.11}, {11, 0.12}, {12, 0.13}, {13, 0.14}, {14, 0.15}, {15, 0.16}, {16, 0.17},
    {17, 0.18}, {18, 0.19}, {19, 0.2}, {20, 0.21}, {22, 0.22}, {23, 0.23}, {25, 0.24}, {27, 0.25}, {28, 0.26},
    {30, 0.27}, {32, 0.28}, {35, 0.29}, {37, 0.3}, {40, 0.31}, {42, 0.32}, {45, 0.33}, {49, 0.34},
    {52, 0.35}, {55, 0.36}, {59, 0.37}, {63, 0.38}, {68, 0.39}, {72, 0.4}, {77, 0.41}, {83, 0.42}, {89, 0.43},
    {95, 0.44}, {101, 0.45}, {108, 0.46}, {116, 0.47}, {124, 0.48}, {132, 0.49}, {141, 0.5}, {151, 0.51},
    {162, 0.52}, {173, 0.53}, {185, 0.54}, {198, 0.55}, {211, 0.56}, {226, 0.57}, {241, 0.58}, {258, 0.59}, {276, 0.6},
    {295, 0.61}, {315, 0.62}, {337, 0.63}, {361, 0.64}, {385, 0.65}, {412, 0.66}, {441, 0.67},
    {471, 0.68}, {504, 0.69}, {538, 0.7}, {576, 0.71}, {615, 0.72}, {658, 0.73}, {703, 0.74}, {752, 0.75}, {804, 0.76},
    {860, 0.77}, {919, 0.78}, {983, 0.79}, {1051, 0.8}, {1123, 0.81}, {1201, 0.82}, {1284, 0.83},
    {1373, 0.84}, {1468, 0.85}, {1569, 0.86}, {1677, 0.87}, {1793, 0.88}, {1917, 0.89}, {2050, 0.9}, {2192, 0.91},
    {2343, 0.92}, {2505, 0.93}, {2678, 0.94}, {2864, 0.95}, {3062, 0.96}, {3273, 0.97}, {3499, 0.98},
    {3741, 0.99}, {4000, 1.0}
};

*/

// Please note, -inf is represented as -90.0 in the code below.
const std::set<float> levelValues_161 = {
    -90.0, -87.0, -84.0, -81.0, -78.0, -75.0, -72.0, -69.0, -66.0, -63.0, -60.0, -59.0, -58.0, -57.0, -56.0, -55.0,
    -54.0, -53.0, -52.0, -51.0, -50.0, -49.0, -48.0, -47.0, -46.0, -45.0, -44.0, -43.0, -42.0,
    -41.0, -40.0, -39.0, -38.0, -37.0, -36.0, -35.0, -34.0, -33.0, -32.0, -31.0, -30.0, -29.5, -29.0, -28.5, -28.0,
    -27.5, -27.0, -26.5, -26.0, -25.5, -25.0, -24.5, -24.0, -23.5, -23.0, -22.5, -22.0, -21.5,
    -21.0, -20.5, -20.0, -19.5, -19.0, -18.5, -18.0, -17.5, -17.0, -16.5, -16.0, -15.5, -15.0, -14.5, -14.0, -13.5,
    -13.0, -12.5, -12.0, -11.5, -11.0, -10.5, -10.0, -9.8, -9.5, -9.3, -9.0, -8.8, -8.5, -8.3,
    -8.0, -7.8, -7.5, -7.3, -7.0, -6.8, -6.5, -6.3, -6.0, -5.8, -5.5, -5.3, -5.0, -4.8, -4.5, -4.3, -4.0, -3.8, -3.5,
    -3.3, -3.0, -2.8, -2.5, -2.3, -2.0, -1.8, -1.5, -1.3, -1.0, -0.8, -0.5, -0.3, 0.0, 0.3,
    0.5, 0.8, 1.0, 1.3, 1.5, 1.8, 2.0, 2.3, 2.5, 2.8, 3.0, 3.3, 3.5, 3.8, 4.0, 4.3, 4.5, 4.8, 5.0, 5.3, 5.5, 5.8, 6.0,
    6.3, 6.5, 6.8, 7.0, 7.3, 7.5, 7.8, 8.0, 8.3, 8.5, 8.8, 9.0, 9.3, 9.5, 9.8, 10.0,
};

const std::unordered_map<float, float> floatToLevel_161 = {
    {0.0, -90.0}, {0.0063, -87.0}, {0.0125, -84.0}, {0.0188, -81.0}, {0.025, -78.0}, {0.0313, -75.0}, {0.0375, -72.0},
    {0.0437, -69.0}, {0.05, -66.0}, {0.0562, -63.0}, {0.0625, -60.0}, {0.0688, -59.0}, {0.075, -58.0},
    {0.0812, -57.0}, {0.0875, -56.0}, {0.0938, -55.0}, {0.1, -54.0}, {0.1063, -53.0}, {0.1125, -52.0}, {0.1187, -51.0},
    {0.125, -50.0}, {0.1312, -49.0}, {0.1375, -48.0}, {0.1437, -47.0}, {0.15, -46.0}, {0.1563, -45.0},
    {0.1625, -44.0}, {0.1688, -43.0}, {0.175, -42.0}, {0.1813, -41.0}, {0.1875, -40.0}, {0.1937, -39.0}, {0.2, -38.0},
    {0.2062, -37.0}, {0.2125, -36.0}, {0.2188, -35.0}, {0.225, -34.0}, {0.2313, -33.0}, {0.2375, -32.0},
    {0.2438, -31.0}, {0.25, -30.0}, {0.2562, -29.5}, {0.2625, -29.0}, {0.2688, -28.5}, {0.275, -28.0}, {0.2813, -27.5},
    {0.2875, -27.0}, {0.2937, -26.5}, {0.3, -26.0}, {0.3063, -25.5}, {0.3125, -25.0}, {0.3187, -24.5},
    {0.325, -24.0}, {0.3313, -23.5}, {0.3375, -23.0}, {0.3438, -22.5}, {0.35, -22.0}, {0.3562, -21.5}, {0.3625, -21.0},
    {0.3688, -20.5}, {0.375, -20.0}, {0.3812, -19.5}, {0.3875, -19.0}, {0.3938, -18.5}, {0.4, -18.0},
    {0.4063, -17.5}, {0.4125, -17.0}, {0.4187, -16.5}, {0.425, -16.0}, {0.4313, -15.5}, {0.4375, -15.0},
    {0.4437, -14.5}, {0.45, -14.0}, {0.4563, -13.5}, {0.4625, -13.0}, {0.4688, -12.5}, {0.475, -12.0}, {0.4812, -11.5},
    {0.4875, -11.0}, {0.4938, -10.5}, {0.5, -10.0}, {0.5063, -9.8}, {0.5125, -9.5}, {0.5188, -9.3}, {0.525, -9.0},
    {0.5313, -8.8}, {0.5375, -8.5}, {0.5437, -8.3}, {0.55, -8.0}, {0.5562, -7.8}, {0.5625, -7.5},
    {0.5688, -7.3}, {0.575, -7.0}, {0.5813, -6.8}, {0.5875, -6.5}, {0.5938, -6.3}, {0.6, -6.0}, {0.6062, -5.8},
    {0.6125, -5.5}, {0.6187, -5.3}, {0.625, -5.0}, {0.6313, -4.8}, {0.6375, -4.5}, {0.6438, -4.3},
    {0.65, -4.0}, {0.6563, -3.8}, {0.6625, -3.5}, {0.6687, -3.3}, {0.675, -3.0}, {0.6812, -2.8}, {0.6875, -2.5},
    {0.6938, -2.3}, {0.7, -2.0}, {0.7063, -1.8}, {0.7125, -1.5}, {0.7188, -1.3}, {0.725, -1.0},
    {0.7312, -0.8}, {0.7375, -0.5}, {0.7437, -0.3}, {0.75, 0.0}, {0.7563, 0.3}, {0.7625, 0.5}, {0.7688, 0.8},
    {0.775, 1.0}, {0.7813, 1.3}, {0.7875, 1.5}, {0.7937, 1.8}, {0.8, 2.0}, {0.8062, 2.3}, {0.8125, 2.5},
    {0.8188, 2.8}, {0.825, 3.0}, {0.8313, 3.3}, {0.8375, 3.5}, {0.8438, 3.8}, {0.85, 4.0}, {0.8562, 4.3}, {0.8625, 4.5},
    {0.8687, 4.8}, {0.875, 5.0}, {0.8813, 5.3}, {0.8875, 5.5}, {0.8938, 5.8}, {0.9, 6.0},
    {0.9063, 6.3}, {0.9125, 6.5}, {0.9187, 6.8}, {0.925, 7.0}, {0.9312, 7.3}, {0.9375, 7.5}, {0.9438, 7.8}, {0.95, 8.0},
    {0.9563, 8.3}, {0.9625, 8.5}, {0.9688, 8.8}, {0.975, 9.0}, {0.9812, 9.3}, {0.9875, 9.5},
    {0.9937, 9.8}, {1.0, 10.0},
};

const std::unordered_map<float, float> levelToFloat_161 = {
    {-90.0, 0.0}, {-87.0, 0.0063}, {-84.0, 0.0125}, {-81.0, 0.0188}, {-78.0, 0.025}, {-75.0, 0.0313}, {-72.0, 0.0375},
    {-69.0, 0.0437}, {-66.0, 0.05}, {-63.0, 0.0562}, {-60.0, 0.0625}, {-59.0, 0.0688}, {-58.0, 0.075},
    {-57.0, 0.0812}, {-56.0, 0.0875}, {-55.0, 0.0938}, {-54.0, 0.1}, {-53.0, 0.1063}, {-52.0, 0.1125}, {-51.0, 0.1187},
    {-50.0, 0.125}, {-49.0, 0.1312}, {-48.0, 0.1375}, {-47.0, 0.1437}, {-46.0, 0.15}, {-45.0, 0.1563},
    {-44.0, 0.1625}, {-43.0, 0.1688}, {-42.0, 0.175}, {-41.0, 0.1813}, {-40.0, 0.1875}, {-39.0, 0.1937}, {-38.0, 0.2},
    {-37.0, 0.2062}, {-36.0, 0.2125}, {-35.0, 0.2188}, {-34.0, 0.225}, {-33.0, 0.2313}, {-32.0, 0.2375},
    {-31.0, 0.2438}, {-30.0, 0.25}, {-29.5, 0.2562}, {-29.0, 0.2625}, {-28.5, 0.2688}, {-28.0, 0.275}, {-27.5, 0.2813},
    {-27.0, 0.2875}, {-26.5, 0.2937}, {-26.0, 0.3}, {-25.5, 0.3063}, {-25.0, 0.3125}, {-24.5, 0.3187},
    {-24.0, 0.325}, {-23.5, 0.3313}, {-23.0, 0.3375}, {-22.5, 0.3438}, {-22.0, 0.35}, {-21.5, 0.3562}, {-21.0, 0.3625},
    {-20.5, 0.3688}, {-20.0, 0.375}, {-19.5, 0.3812}, {-19.0, 0.3875}, {-18.5, 0.3938}, {-18.0, 0.4},
    {-17.5, 0.4063}, {-17.0, 0.4125}, {-16.5, 0.4187}, {-16.0, 0.425}, {-15.5, 0.4313}, {-15.0, 0.4375},
    {-14.5, 0.4437}, {-14.0, 0.45}, {-13.5, 0.4563}, {-13.0, 0.4625}, {-12.5, 0.4688}, {-12.0, 0.475}, {-11.5, 0.4812},
    {-11.0, 0.4875}, {-10.5, 0.4938}, {-10.0, 0.5}, {-9.8, 0.5063}, {-9.5, 0.5125}, {-9.3, 0.5188}, {-9.0, 0.525},
    {-8.8, 0.5313}, {-8.5, 0.5375}, {-8.3, 0.5437}, {-8.0, 0.55}, {-7.8, 0.5562}, {-7.5, 0.5625},
    {-7.3, 0.5688}, {-7.0, 0.575}, {-6.8, 0.5813}, {-6.5, 0.5875}, {-6.3, 0.5938}, {-6.0, 0.6}, {-5.8, 0.6062},
    {-5.5, 0.6125}, {-5.3, 0.6187}, {-5.0, 0.625}, {-4.8, 0.6313}, {-4.5, 0.6375}, {-4.3, 0.6438},
    {-4.0, 0.65}, {-3.8, 0.6563}, {-3.5, 0.6625}, {-3.3, 0.6687}, {-3.0, 0.675}, {-2.8, 0.6812}, {-2.5, 0.6875},
    {-2.3, 0.6938}, {-2.0, 0.7}, {-1.8, 0.7063}, {-1.5, 0.7125}, {-1.3, 0.7188}, {-1.0, 0.725},
    {-0.8, 0.7312}, {-0.5, 0.7375}, {-0.3, 0.7437}, {0.0, 0.75}, {0.3, 0.7563}, {0.5, 0.7625}, {0.8, 0.7688},
    {1.0, 0.775}, {1.3, 0.7813}, {1.5, 0.7875}, {1.8, 0.7937}, {2.0, 0.8}, {2.3, 0.8062}, {2.5, 0.8125},
    {2.8, 0.8188}, {3.0, 0.825}, {3.3, 0.8313}, {3.5, 0.8375}, {3.8, 0.8438}, {4.0, 0.85}, {4.3, 0.8562}, {4.5, 0.8625},
    {4.8, 0.8687}, {5.0, 0.875}, {5.3, 0.8813}, {5.5, 0.8875}, {5.8, 0.8938}, {6.0, 0.9},
    {6.3, 0.9063}, {6.5, 0.9125}, {6.8, 0.9187}, {7.0, 0.925}, {7.3, 0.9312}, {7.5, 0.9375}, {7.8, 0.9438}, {8.0, 0.95},
    {8.3, 0.9563}, {8.5, 0.9625}, {8.8, 0.9688}, {9.0, 0.975}, {9.3, 0.9812}, {9.5, 0.9875},
    {9.8, 0.9937}, {10.0, 1.0}
};
/*
const std::set<float> rtaDecay = {
    0.25, 0.31, 0.4, 0.5, 0.63, 0.79, 1.0, 1.26, 1.59, 2.0, 2.52, 3.17, 4.0, 5.04, 6.35, 8.0, 10.08, 12.7, 16.0
};

const std::unordered_map<float, float> floatToRTADecay = {
    {0.0, 0.25}, {0.0556, 0.31}, {0.1111, 0.4}, {0.1667, 0.5}, {0.2222, 0.63}, {0.2778, 0.79}, {0.3333, 1.0},
    {0.3889, 1.26}, {0.4444, 1.59}, {0.5, 2.0}, {0.5556, 2.52}, {0.6111, 3.17}, {0.6667, 4.0}, {0.7222, 5.04},
    {0.7778, 6.35}, {0.8333, 8.0}, {0.8889, 10.08}, {0.9444, 12.7}, {1.0, 16.0}
};

const std::unordered_map<float, float> rtaDecayToFloat = {
    {0.25, 0.0}, {0.31, 0.0556}, {0.4, 0.1111}, {0.5, 0.1667}, {0.63, 0.2222}, {0.79, 0.2778}, {1.0, 0.3333},
    {1.26, 0.3889}, {1.59, 0.4444}, {2.0, 0.5}, {2.52, 0.5556}, {3.17, 0.6111}, {4.0, 0.6667}, {5.04, 0.7222},
    {6.35, 0.7778}, {8.0, 0.8333}, {10.08, 0.8889}, {12.7, 0.9444}, {16.0, 1.0}
};
*/


enum Units {
    HERTZ,
    DB,
    MS,
    NONE
};



// Use LEVEL_1024 for levels with 1024 values, but use LEVEL_161 for levels with 161 values. They use different implementations.
enum ParamType {
    LINF, LOGF, ENUM, STRING, INT,
    LEVEL_1024, LEVEL_161, BITSET, OPTION,
    _GENERIC_FLOAT, // ONLY TO BE USED IN ValueStorer. Used for metadata to let OSC Message Constructor know which datatype to use
    _BLANK // ONLY TO BE USED IN NonIter and ValueStorer acting as nullptr-equivalent for OSCMessageArguments
};



// TODO: Considering support for BLOB (binary)?
struct ValueStorer {
    // When Enum or Int:
    int intValue {};
    // When Float or Level:
    float floatValue {};
    // When String, Bitset or Option
    std::string stringValue {};

    ParamType _meta_PARAMTYPE;

    ValueStorer(int intValue): intValue(intValue), _meta_PARAMTYPE(INT) {};
    ValueStorer(float floatValue): floatValue(floatValue), _meta_PARAMTYPE(_GENERIC_FLOAT) {};
    ValueStorer(const std::string &stringValue): stringValue(stringValue), _meta_PARAMTYPE(STRING) {};
    ValueStorer(): _meta_PARAMTYPE(_BLANK) {}; // Used for NonIter, acting as nullptr-equivalent for OSCMessageArguments

    void changeStore(int newIntValue) {
        intValue = newIntValue;
        _meta_PARAMTYPE = INT;
    }
    void changeStore(float newFloatValue) {
        floatValue = newFloatValue;
        _meta_PARAMTYPE = _GENERIC_FLOAT;
    }
    void changeStore(const std::string &newStringValue) {
        stringValue = newStringValue;
        _meta_PARAMTYPE = STRING;
    }

    void changeStore(const ValueStorer& other) {
        intValue = other.intValue;
        floatValue = other.floatValue;
        stringValue = other.stringValue;
        _meta_PARAMTYPE = other._meta_PARAMTYPE;
    }

    // Clears the store to the value corresponding to if a blank constructor was used. BUT THIS ALSO MEANS THE PARAMTYPE
    // WILL CHANGE TO BLANK!
    void clearStore() {
        intValue = 0;
        floatValue = 0.f;
        stringValue = "";
        _meta_PARAMTYPE = _BLANK;
    }
};


// Ok, this originally used std::variant... but turns out it's slow as f*ck.
// So this is a rare case where it makes sense to sacrifice the ridiculous amount of memory for multiple structs.

struct OptionParam {
    const std::string name;
    const std::string verboseName;
    const std::string description;
    const std::vector<std::string> value {}; // OPTION
    const ParamType _meta_PARAMTYPE {OPTION};
    const Units _meta_UNIT;
    const size_t len {}; // Number of options

    OptionParam(const std::string &name, const std::string &verboseName, const std::string &description,
        const std::vector<std::string>& value, const Units unit = NONE, bool _supressLen0Assert = false):
        name(name), verboseName(verboseName), description(description), value(value), len(value.size()),
        _meta_UNIT(unit) {
        if (len == 0 && !_supressLen0Assert) {
            jassertfalse; // Cannot create OptionParam with no options
        }
    }
};


struct EnumParam {
    const std::string name;
    const std::string verboseName;
    const std::string description;
    const std::vector<std::string> value {}; // ENUM
    const ParamType _meta_PARAMTYPE {ENUM};
    const Units _meta_UNIT;
    const size_t len {}; // Number of enumerators

    EnumParam(const std::string &name, const std::string &verboseName, const std::string &description,
        const std::vector<std::string>& value, const Units unit = NONE, bool _supressLen0Assert = false):
        name(name), verboseName(verboseName), description(description), value(value), len(value.size()),
    _meta_UNIT(unit) {
        if (len == 0 && !_supressLen0Assert) {
            jassertfalse; // Cannot create EnumParam with no enumerators
        }
    }

    bool isSimilar(const EnumParam& other) const {
        if (name == other.name && verboseName == other.verboseName && description == other.description &&
            value == other.value && _meta_UNIT == other._meta_UNIT) {
            return true;
        }
        return false;
    }

    bool validIndex(int index) const {
        return index >= 0 && index < len;
    }
};



// static std::string stringFromBoolVector(const std::vector<bool> &boolVector ) {
//     std::stringstream ss;
//     for (const auto& b : boolVector) {
//         ss << (b ? '1' : '0');
//     }
//     return ss.str();
// }

static unsigned int boolVectorToInt(const std::vector<bool>& boolVector) {
    // While this function uses unsigned int, it is likely the caller is not (rather they are likely using a signed int)
    // To advise of overflows, we'll advise if we go over 31 elements.
    // From my personal observations, intValue will never overflow from the maximum value, even when iVal is added to it
    // when intValue is already at the max value.
    // But when this is returned and cast to a signed int, it will overflow to become -1.
    // This is still undefined behaviour and may vary based on systems.
    if (boolVector.size() > 31) {
        jassertfalse;
    }
    unsigned int intValue {};
    unsigned iVal { 1 };
    for (auto it = boolVector.rbegin(); it != boolVector.rend(); ++it) {
        if (*it) {
            intValue += iVal;
        }
        iVal *= 2;
    }
    return intValue;
}

// Includes std::string, float and int
struct NonIter {
    const std::string name;
    const std::string verboseName;
    const std::string description;
    // Also used for bitset.
    const int defaultIntValue {};
    // For intMin and intMax:
    // When int, range.
    // When string, length.
    // When bitset, length of bitset (hence intMin == intMax).
    const int intMin {}; // Min/maxes are all inclusive
    const int intMax {};

    const float defaultFloatValue {};
    const float floatMin {};
    const float floatMax {};
    const bool normalisedInverted {false}; // When the normalised value is inverted from 1-0 not 0-1. For example, quality is 10-0.3, not 0.3-10


    const std::string defaultStringValue {};
    // We'll use int_min and int_max for string min/max length.

    const ParamType _meta_PARAMTYPE;
    const Units _meta_UNIT;

    // Integer
    // A note: if you're using int, you probably want to use LINF. Realistically, an integer should be an EnumParam.
    // The main exception for this is an in-path argument.
    NonIter(const std::string &name, const std::string &verboseName, const std::string &description, const int intDefVal,
        const int intMinVal = NumericLimits::INTMIN, const int intMaxVal = NumericLimits::INTMAX,
        const Units unit = NONE):
    name(name), verboseName(verboseName), description(description), defaultIntValue(intDefVal),
    _meta_PARAMTYPE(INT), intMin(intMinVal), intMax(intMaxVal), _meta_UNIT(unit) {}

    // Bitset - Implies no unit! Not the case? Use the custom constructor.
    NonIter(const std::string &name, const std::string &verboseName, const std::string &description,
        const std::vector<bool> &value):
    name(name), verboseName(verboseName), description(description),
    defaultIntValue(boolVectorToInt(value)), intMin(value.size()), intMax(value.size()), _meta_PARAMTYPE(BITSET),
    _meta_UNIT(NONE) {}

    // LINF, LOGF, LEVEL_1024, LEVEL_161
    // Implies _meta_UNIT = dB for LEVEL_1024 and LEVEL_161, even if another unit is explicitly passed.
    // Also implies fltMinVal = -90.f and fltMaxVal = 10.f for LEVEL_1024 and LEVEL_161, even if other values are
    // explicitly passed.
    // Not the case? Use the custom constructor.
    NonIter(const std::string &name, const std::string &verboseName, const std::string &description, const float fltDefVal,
        const ParamType type, const float fltMinVal = NumericLimits::FLOATMIN,
        const float fltMaxVal = NumericLimits::FLOATMAX, const Units unit = NONE, bool invertNormalisedValue = false):
    name(name), verboseName(verboseName), description(description), defaultFloatValue(fltDefVal), _meta_PARAMTYPE(type),
    floatMin((type == LEVEL_161 || type == LEVEL_1024) ? -90.f : fltMinVal),
    floatMax((type == LEVEL_161 || type == LEVEL_1024) ? 10.f : fltMaxVal),
    _meta_UNIT((type == LEVEL_161 || type == LEVEL_1024) ? DB: unit),
    normalisedInverted(invertNormalisedValue) {}


    // String
    NonIter(const std::string &name, const std::string &verboseName, const std::string &description, const std::string &value,
        const int minLen = 0, const int maxLen = -1, const Units unit = NONE):
    name(name), verboseName(verboseName), description(description), defaultStringValue(value),
    _meta_PARAMTYPE(STRING), intMin(minLen),
    intMax((maxLen == -1) ? STD_STRING_SIZE_LIMIT: maxLen), _meta_UNIT(unit) {}

    // Blank
    NonIter(): name(""), verboseName(""), description(""), _meta_PARAMTYPE(_BLANK), _meta_UNIT(NONE) {}

    // Custom constructor. Just saying, if you can only create a NonIter via this overload, you're probably doing
    // something wrong.
    NonIter(const std::string& name, const std::string& verboseName, const std::string& description,
        const int defaultIntValue, const int intMin, const int intMax, const float defaultFloatValue,
        const float floatMin, const float floatMax, const std::string& defaultStringValue, const ParamType _meta_PARAMTYPE,
        const Units _meta_UNIT, const bool normalisedFloatInverted): name(name), verboseName(verboseName), description(description),
        defaultIntValue(defaultIntValue), intMin(intMin), intMax(intMax), defaultFloatValue(defaultFloatValue),
        floatMin(floatMin), floatMax(floatMax), defaultStringValue(defaultStringValue), _meta_PARAMTYPE(_meta_PARAMTYPE),
        _meta_UNIT(_meta_UNIT), normalisedInverted(normalisedFloatInverted) {}

    // Check if a float is valid. If the ParamType doesn't support float, returns false.
    bool valueIsValid(float val) const {
        if (!(_meta_PARAMTYPE == LINF || _meta_PARAMTYPE == LOGF || _meta_PARAMTYPE == LEVEL_161 ||
            _meta_PARAMTYPE == LEVEL_1024)) {
            return false;
        }
        return val >= floatMin && val <= floatMax;
    }

    // Check if an int is valid. If the ParamType doesn't support int or bitset, returns false.
    // If the paramtype is bitset and the value is appropriate for the binary to integer representation of the bitset,
    // it will also return true.
    bool valueIsValid(int val) const {
        if (_meta_PARAMTYPE == INT) {
            return val >= intMin && val <= intMax;
        } if (_meta_PARAMTYPE == BITSET) {
            return val >= 0 && val < std::pow(2, intMin); // Remember, intMin == intMax when ParamType is BITSET.
        }
        return false;
    }

    // Check if a string is valid. If the ParamType doesn't support string, returns false.
    bool valueIsValid(std::string val) const {
        if (_meta_PARAMTYPE != STRING) {
            return false;
        }
        return val.length() >= intMin && val.length() <= intMax;
    }

    // Checks if a bitset is valid. If the ParamType doesn't support bitset, returns false.
    bool valueIsValid(const std::vector<bool>& val) const {
        if (_meta_PARAMTYPE != BITSET) {
            return false;
        }
        return val.size() != intMin; // Remember, intMin == intMax when ParamType is BITSET.
    }

    // Checks all values are the same. VERY SLOW. USE ONLY WHEN REQUIRED.
    bool isSimilar(const NonIter& other) const {
        if (name == other.name && verboseName == other.verboseName &&
            description == other.description && defaultIntValue == other.defaultIntValue &&
            intMin == other.intMin && intMax == other.intMax &&
            defaultFloatValue == other.defaultFloatValue && floatMin == other.floatMin &&
            floatMax == other.floatMax && normalisedInverted == other.normalisedInverted &&
            defaultStringValue == other.defaultStringValue &&
            _meta_PARAMTYPE == other._meta_PARAMTYPE && _meta_UNIT == other._meta_UNIT) {
            return true;
        }
        return false;
    }
};



typedef std::vector<ValueStorer> ValueStorerArray;
// When using an ArgumentEmbeddedPath, the ParamTypes can ONLY be INT or STRING.
typedef std::vector<std::variant<std::string, NonIter>> ArgumentEmbeddedPath;
typedef std::variant<OptionParam, NonIter, EnumParam> OSCMessageArguments;
typedef std::pair<ArgumentEmbeddedPath, OSCMessageArguments> PathToArgumentPair;
// The below are the same as PathToArgumentPair, but for when one type of argument is used. This makes dealing with types infinitely easier.
typedef std::pair<ArgumentEmbeddedPath, NonIter> NonIter_PathToArgumentPair;
typedef std::pair<ArgumentEmbeddedPath, EnumParam> EnumParam_PathToArgumentPair;
typedef std::pair<ArgumentEmbeddedPath, OptionParam> OptionParam_PathToArgumentPair;


// An example. This assumes const std::string& basePath = "/ch".
// inline std::set<std::variant<std::string, OptionParam, EnumParam, NonIter>> channelFader = {
//     NonIter("channel", 1, 1, 32), "/mix/fader"};


inline const OptionParam nullOption = {"", "", "", {}, NONE, true};
inline const EnumParam nullEnum = {"", "", "", {}, NONE, true};
inline const NonIter nullNonIter = {};



struct FxParam {
    std::string name;
    ParamType type;
    float min{};
    float max{};
    int enumElements{};
    std::vector<std::string> enumMap{};

    // Constructor for LINF/LOGF types
    FxParam(std::string paramName, ParamType paramType, float rangeMin, float rangeMax) :
        name(std::move(paramName)), type(paramType), min(rangeMin), max(rangeMax), enumElements(0) {}

    // Constructor for ENUM types
    FxParam(std::string paramName, ParamType paramType, int count, std::vector<std::string> map) :
        name(std::move(paramName)), type(paramType), min(0.0f), max(0.0f), enumElements(count), enumMap(std::move(map)) {}

    bool operator<(const FxParam& other) const {
        return name < other.name;
    }
};


struct Effect {
    int enumVal1_4;
    int enumVal5_8;
    std::string enumName;
    std::bitset<6> presetFlag;
    std::string presetName;
    std::set<FxParam> parameters;

    bool operator<(const Effect& other) const {
        if (enumName != other.enumName) {
            return enumName < other.enumName;
        }
        if (enumVal1_4 != other.enumVal1_4) {
            return enumVal1_4 < other.enumVal1_4;
        }
        return enumVal5_8 < other.enumVal5_8;
    }
};


inline std::vector<std::string> femMaleEnuMap() {
    return {"FEM", "MALE"};
}

inline std::vector<std::string> onOffEnumMap() {
    return {"OFF", "ON"};
}

inline std::vector<std::string> factorsEnums() {
    return {"1/4", "3/8", "1/2", "2/3", "1", "4/3", "3/2", "2", "3"};
}

// Temporary commenting to not kill every compilation
/*

// Please note: the code below is **AI GENERATED** and may contain errors.
const std::set<Effect> X32Effects = {
    // 1. Hall Reverb (HALL)
    {
        0, -1, "HALL", std::bitset<6>("000000"), "Hall Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.2f, 5.0f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Bass Multi", ParamType::LOGF, 0.5f, 2.0f},
            {"Spread", ParamType::LINF, 0.0f, 50.0f},
            {"Shape", ParamType::LINF, 0.0f, 250.0f},
            {"Mod Speed", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 2. Ambiance (AMBI)
    {
        1, -1, "AMBI", std::bitset<6>("000101"), "Ambiance",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.2f, 7.3f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Modulate", ParamType::LINF, 0.0f, 100.0f},
            {"Tail Gain", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 3. Rich Plate Reverb (RPLT)
    {
        2, -1, "RPLT", std::bitset<6>("000011"), "Rich Plate Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.3f, 29.0f},
            {"Size", ParamType::LINF, 4.0f, 39.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Bass Multi", ParamType::LOGF, 0.25f, 4.0f},
            {"Spread", ParamType::LINF, 0.0f, 50.0f},
            {"Attack", ParamType::LINF, 0.0f, 100.0f},
            {"Spin", ParamType::LINF, 0.0f, 100.0f},
            {"Echo L", ParamType::LINF, 0.0f, 1200.0f},
            {"Echo R", ParamType::LINF, 0.0f, 1200.0f},
            {"Echo Feed L", ParamType::LINF, -100.0f, 100.0f},
            {"Echo Feed R", ParamType::LINF, -100.0f, 100.0f} // PDF says "Echo Feed L" twice, assuming second is R
        }
    },
    // 4. Room Reverb (ROOM)
    {
        3, -1, "ROOM", std::bitset<6>("000010"), "Room Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.3f, 29.0f},
            {"Size", ParamType::LINF, 4.0f, 72.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Bass Multi", ParamType::LOGF, 0.25f, 4.0f},
            {"Spread", ParamType::LINF, 0.0f, 50.0f},
            {"Shape", ParamType::LINF, 0.0f, 250.0f},
            {"Spin", ParamType::LINF, 0.0f, 100.0f},
            {"Echo L", ParamType::LINF, 0.0f, 1200.0f},
            {"Echo R", ParamType::LINF, 0.0f, 1200.0f},
            {"Echo Feed L", ParamType::LINF, -100.0f, 100.0f},
            {"Echo Feed R", ParamType::LINF, -100.0f, 100.0f} // PDF says "Echo Feed L" twice, assuming second is R
        }
    },
    // 5. Chamber Reverb (CHAM)
    {
        4, -1, "CHAM", std::bitset<6>("000001"), "Chamber Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.3f, 29.0f},
            {"Size", ParamType::LINF, 4.0f, 72.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Bass Multi", ParamType::LOGF, 0.25f, 4.0f},
            {"Spread", ParamType::LINF, 0.0f, 50.0f},
            {"Shape", ParamType::LINF, 0.0f, 250.0f},
            {"Spin", ParamType::LINF, 0.0f, 100.0f},
            {"Reflection L", ParamType::LINF, 0.0f, 500.0f},
            {"Reflection R", ParamType::LINF, 0.0f, 500.0f},
            {"Reflection Gain L", ParamType::LINF, 0.0f, 100.0f},
            {"Reflection Gain R", ParamType::LINF, 0.0f, 100.0f} // PDF says "Reflection Gain L" twice
        }
    },
    // 6. Plate Reverb (PLAT)
    {
        5, -1, "PLAT", std::bitset<6>("001000"), "Plate Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 0.2f, 10.0f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Bass Multi", ParamType::LOGF, 0.5f, 2.0f},
            {"Xover", ParamType::LOGF, 10.0f, 500.0f},
            {"Mod", ParamType::LINF, 0.0f, 50.0f},
            {"Mod Speed", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 7. Vintage Reverb (VREV)
    {
        6, -1, "VREV", std::bitset<6>("001001"), "Vintage Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 120.0f},
            {"Decay", ParamType::LOGF, 0.3f, 4.5f},
            {"Modulate", ParamType::LINF, 0.0f, 10.0f},
            {"Vintage", ParamType::ENUM, 2, onOffEnumMap()},
            {"Position", ParamType::ENUM, 2, {"FRONT", "REAR"}},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Lo Multiply", ParamType::LOGF, 0.5f, 2.0f},
            {"Hi Multiply", ParamType::LOGF, 0.25f, 1.0f}
        }
    },
    // 8. Vintage Room (VRM)
    {
        7, -1, "VRM", std::bitset<6>("001000"), "Vintage Room", // PDF appendix has "Vintage room"
        {
            {"Reverb Delay", ParamType::LINF, 0.0f, 20.0f},
            {"Decay", ParamType::LOGF, 0.1f, 20.0f},
            {"Size", ParamType::LINF, 0.0f, 10.0f},
            {"Density", ParamType::LINF, 1.0f, 30.0f},
            {"ER Level", ParamType::LINF, 0.0f, 190.0f}, // PDF has 0...190 for ER Level
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Multiply", ParamType::LOGF, 0.1f, 10.0f},
            {"Hi Multiply", ParamType::LOGF, 0.1f, 10.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"ER Left", ParamType::LINF, 0.0f, 10.0f},
            {"ER Right", ParamType::LINF, 0.0f, 10.0f},
            {"Freeze", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 9. Gated Reverb (GATE)
    {
        8, -1, "GATE", std::bitset<6>("000110"), "Gated Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 140.0f, 1000.0f},
            {"Attack", ParamType::LINF, 0.0f, 30.0f},
            {"Density", ParamType::LINF, 1.0f, 30.0f},
            {"Spread", ParamType::LINF, 0.0f, 100.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Hi Shv Gain", ParamType::LINF, -30.0f, 0.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f}
        }
    },
    // 10. Reverse Reverb (RVRS)
    {
        9, -1, "RVRS", std::bitset<6>("000111"), "Reverse Reverb",
        {
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f},
            {"Decay", ParamType::LOGF, 140.0f, 1000.0f},
            {"Rise", ParamType::LINF, 0.0f, 50.0f},
            {"Diffuse", ParamType::LINF, 1.0f, 30.0f},
            {"Spread", ParamType::LINF, 1.0f, 100.0f},
            {"Level", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Hi Shv Gain", ParamType::LINF, -30.0f, 0.0f}
        }
    },
    // 11. Stereo Delay (DLY)
    {
        10, -1, "DLY", std::bitset<6>("010100"), "Stereo Delay",
        {
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Time", ParamType::LINF, 0.0f, 3000.0f}, // PDF p79, [0...3000]
            {"Mode", ParamType::ENUM, 3, {"ST", "X", "M"}},
            {"Factor L", ParamType::ENUM, 9, factorsEnums()},
            {"Factor R", ParamType::ENUM, 9, factorsEnums()},
            {"Offset L/R", ParamType::LINF, -100.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Feed Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Feed Left", ParamType::LINF, 1.0f, 100.0f},
            {"Feed Right", ParamType::LINF, 1.0f, 100.0f},
            {"Feed Hi Cut", ParamType::LOGF, 200.0f, 20000.0f}
        }
    },
    // 12. 3-Tap Delay (3TAP)
    {
        11, -1, "3TAP", std::bitset<6>("010101"), "3-Tap Delay",
        {
            {"Dry", ParamType::LINF, 0.0f, 3000.0f},
            // Parameter name "Dry" on p80 looks like it should be "Time" or "Delay Base"
            {"Gain Base", ParamType::LINF, 0.0f, 100.0f},
            {"Pan Base", ParamType::LINF, -100.0f, 100.0f},
            {"Feedback", ParamType::LINF, 0.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Factor A", ParamType::ENUM, 9, factorsEnums()},
            {"Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Pan A", ParamType::LINF, -100.0f, 100.0f},
            {"Factor B", ParamType::ENUM, 9, factorsEnums()},
            {"Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Pan B", ParamType::LINF, -100.0f, 100.0f},
            {"Cross Feed", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mono", ParamType::ENUM, 2, onOffEnumMap()},
            {"Dry Out", ParamType::ENUM, 2, onOffEnumMap()}
            // PDF p80 has "Dry" as last param. "Dry Out" for clarity.
        }
    },
    // 13. 4-Tap Delay (4TAP) - PDF calls it Rhythm Delay in appendix
    {
        12, -1, "4TAP", std::bitset<6>("010110"), "Rhythm Delay",
        {
            {"Time", ParamType::LINF, 1.0f, 3000.0f},
            {"Gain Base", ParamType::LINF, 0.0f, 100.0f},
            {"Feedback", ParamType::LINF, 0.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Spread", ParamType::LINF, 0.0f, 6.0f},
            {"Factor A", ParamType::ENUM, 9, factorsEnums()},
            {"Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Factor B", ParamType::ENUM, 9, factorsEnums()},
            {"Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Factor C", ParamType::ENUM, 9, factorsEnums()},
            {"Gain C", ParamType::LINF, 0.0f, 100.0f},
            {"Cross Feed", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mono", ParamType::ENUM, 2, onOffEnumMap()},
            {"Dry", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 14. Stereo Chorus (CRS)
    {
        13, -1, "CRS", std::bitset<6>("001010"), "Stereo Chorus",
        {
            {"Speed", ParamType::LOGF, 0.05f, 5.0f},
            {"Depth L", ParamType::LINF, 0.0f, 100.0f},
            {"Depth R", ParamType::LINF, 0.0f, 100.0f},
            {"Delay L", ParamType::LOGF, 0.5f, 20.0f},
            {"Delay R", ParamType::LOGF, 0.5f, 20.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Wave", ParamType::LINF, 0.0f, 100.0f},
            {"Spread", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 15. Stereo Flanger (FLNG)
    {
        14, -1, "FLNG", std::bitset<6>("001011"), "Stereo Flanger",
        {
            {"Speed", ParamType::LOGF, 0.05f, 5.0f},
            {"Depth L", ParamType::LINF, 0.0f, 100.0f},
            {"Depth R", ParamType::LINF, 0.0f, 100.0f},
            {"Delay L", ParamType::LOGF, 0.5f, 20.0f},
            {"Delay R", ParamType::LOGF, 0.5f, 20.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Feed Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Feed Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Feed", ParamType::LINF, -90.0f, 90.0f}
        }
    },
    // 16. Stereo Phaser (PHAS)
    {
        15, 30, "PHAS", std::bitset<6>("011011"), "Stereo Phaser",
        {
            {"Speed", ParamType::LOGF, 0.05f, 5.0f},
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Resonance", ParamType::LINF, 0.0f, 80.0f},
            {"Base", ParamType::LINF, 0.0f, 50.0f}, // PDF p82 Range is [0...50] for Base
            {"Stages", ParamType::LINF, 2.0f, 12.0f}, // Assuming LINF, though discrete values
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Wave", ParamType::LINF, -50.0f, 50.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Env. Modulation", ParamType::LINF, -100.0f, 100.0f},
            {"Attack", ParamType::LOGF, 10.0f, 1000.0f},
            {"Hold", ParamType::LOGF, 1.0f, 2000.0f},
            {"Release", ParamType::LOGF, 10.0f, 1000.0f}
        }
    },
    // 17. Dimensional Chorus (DIMC)
    {
        16, -1, "DIMC", std::bitset<6>("111010"), "Dimension-C",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mode", ParamType::ENUM, 2, {"M", "ST"}},
            {"Dry", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mode 1", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mode 2", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mode 3", ParamType::ENUM, 2, onOffEnumMap()},
            {"Mode 4", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 18. Mood Filter (FILT)
    {
        17, 31, "FILT", std::bitset<6>("101001"), "Mood Filter",
        {
            {"Speed", ParamType::LOGF, 0.05f, 20.0f},
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Resonance", ParamType::LINF, 0.0f, 100.0f},
            {"Base", ParamType::LOGF, 10.0f, 15000.0f},
            {"Mode", ParamType::ENUM, 4, {"LP", "HP", "BP", "NO"}},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Wave", ParamType::ENUM, 7, {"TRI", "SIN", "SAW", "SAW-", "RMP", "SQU", "RND"}}, // SAW- is SAW (inverted), RMP is Ramp
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Env. Modulation", ParamType::LINF, -100.0f, 100.0f},
            {"Attack", ParamType::LOGF, 10.0f, 250.0f}, // PDF p83
            {"Release", ParamType::LOGF, 10.0f, 500.0f},
            {"Drive", ParamType::LINF, 0.0f, 100.0f},
            {"4 Pole", ParamType::ENUM, 2, onOffEnumMap()},
            {"Side Chain", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 19. Rotary Speaker (ROTA)
    {
        18, -1, "ROTA", std::bitset<6>("011100"), "Rotary Speaker",
        {
            {"Lo Speed", ParamType::LOGF, 0.1f, 4.0f},
            {"Hi Speed", ParamType::LOGF, 2.0f, 10.0f},
            {"Accelerate", ParamType::LINF, 0.0f, 100.0f},
            {"Distance", ParamType::LINF, 0.0f, 100.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Stop", ParamType::ENUM, 2, onOffEnumMap()},
            {"Slow", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 20. Tremolo / Panner (PAN)
    {
        19, 32, "PAN", std::bitset<6>("101000"), "Tremolo/Panner",
        {
            {"Speed", ParamType::LOGF, 0.05f, 4.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Wave", ParamType::LINF, -50.0f, 50.0f},
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Env. Speed", ParamType::LINF, 0.0f, 100.0f},
            {"Env. Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Attack", ParamType::LOGF, 10.0f, 1000.0f},
            {"Hold", ParamType::LOGF, 1.0f, 2000.0f},
            {"Release", ParamType::LOGF, 10.0f, 1000.0f}
        }
    },
    // 21. Sub Octaver (SUB)
    {
        20, 33, "SUB", std::bitset<6>("111001"), "Suboctaver",
        {
            // PDF shows two sets of params, seems like for Channel A / Channel B or Left / Right
            // Assuming these are for one channel/side, and would be duplicated or chosen for stereo/dual
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()}, // This is for the first set
            {"Range A", ParamType::ENUM, 3, {"LO", "MID", "HI"}},
            {"Dry A", ParamType::LINF, 0.0f, 100.0f},
            {"Octave -1 A", ParamType::LINF, 0.0f, 100.0f},
            {"Octave -2 A", ParamType::LINF, 0.0f, 100.0f},
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()}, // This is for the second set
            {"Range B", ParamType::ENUM, 3, {"LO", "MID", "HI"}},
            {"Dry B", ParamType::LINF, 0.0f, 100.0f},
            {"Octave -1 B", ParamType::LINF, 0.0f, 100.0f},
            {"Octave -2 B", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 22. Delay / Chamber (D/RV)
    {
        21, -1, "D/RV", std::bitset<6>("010000"), "Delay/Chamber",
        {
            {"Time", ParamType::LINF, 1.0f, 3000.0f},
            {"Pattern", ParamType::ENUM, 14,
                {"1/4", "1/3", "3/8", "1/2", "2/3", "3/4", "1", "1/4X", "1/3X", "3/8X", "1/2X", "2/3X", "3/4X", "1X"}
            },
            {"Feed Hi Cut", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Feedback", ParamType::LINF, 0.0f, 100.0f},
            {"Cross Feed", ParamType::LINF, 0.0f, 100.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f},
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f}, // Chamber params start
            {"Decay", ParamType::LOGF, 0.1f, 5.0f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 23. Chorus / Chamber (CR/R)
    {
        22, -1, "CR/R", std::bitset<6>("001110"), "Chorus/Chamber",
        {
            {"Speed", ParamType::LOGF, 0.05f, 4.0f}, // Chorus params
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Delay", ParamType::LOGF, 0.5f, 50.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Wave", ParamType::LINF, 0.0f, 100.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f}, // Balance between Chorus and Chamber
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f}, // Chamber params
            {"Decay", ParamType::LOGF, 0.1f, 5.0f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f} // Overall mix
        }
    },
    // 24. Flanger / Chamber (FL/R)
    {
        23, -1, "FL/R", std::bitset<6>("001111"), "Flanger/Chamber",
        {
            {"Speed", ParamType::LOGF, 0.05f, 4.0f}, // Flanger params
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Delay", ParamType::LOGF, 0.5f, 20.0f},
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Feed", ParamType::LINF, -90.0f, 90.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f}, // Balance
            {"Pre Delay", ParamType::LINF, 0.0f, 200.0f}, // Chamber params
            {"Decay", ParamType::LOGF, 0.1f, 5.0f},
            {"Size", ParamType::LINF, 2.0f, 100.0f},
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f} // Overall mix
        }
    },
    // 25. Delay / Chorus (D/CR)
    {
        24, -1, "D/CR", std::bitset<6>("010001"), "Delay/Chorus",
        {
            {"Time", ParamType::LINF, 1.0f, 3000.0f}, // Delay params
            {"Pattern", ParamType::ENUM, 14,
                {"1/4", "1/3", "3/8", "1/2", "2/3", "3/4", "1", "1/4X", "1/3X", "3/8X", "1/2X", "2/3X", "3/4X", "1X"}
            },
            {"Feed Hi Cut", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Feedback", ParamType::LINF, 0.0f, 100.0f},
            {"Cross Feed", ParamType::LINF, 0.0f, 100.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f}, // Balance
            {"Speed", ParamType::LOGF, 0.05f, 4.0f}, // Chorus params
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Delay", ParamType::LOGF, 0.5f, 50.0f}, // Chorus delay
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Wave", ParamType::LINF, 0.0f, 100.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f} // Overall mix
        }
    },
    // 26. Delay / Flanger (D/FL)
    {
        25, -1, "D/FL", std::bitset<6>("010010"), "Delay/Flanger",
        {
            {"Time", ParamType::LINF, 1.0f, 3000.0f}, // Delay params
            {"Pattern", ParamType::ENUM, 14,
                {"1/4", "1/3", "3/8", "1/2", "2/3", "3/4", "1", "1/4X", "1/3X", "3/8X", "1/2X", "2/3X", "3/4X", "1X"}
            },
            {"Feed Hi Cut", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Feedback", ParamType::LINF, 0.0f, 100.0f},
            {"Cross Feed", ParamType::LINF, 0.0f, 100.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f}, // Balance
            {"Speed", ParamType::LOGF, 0.05f, 4.0f}, // Flanger params
            {"Depth", ParamType::LINF, 0.0f, 100.0f},
            {"Delay", ParamType::LOGF, 0.5f, 20.0f}, // Flanger delay
            {"Phase", ParamType::LINF, 0.0f, 180.0f},
            {"Feed", ParamType::LINF, -90.0f, 90.0f}, // Flanger feed
            {"Mix", ParamType::LINF, 0.0f, 100.0f} // Overall mix
        }
    },
    // 27. Modulation Delay (MODD)
    {
        26, -1, "MODD", std::bitset<6>("010011"), "Modulation Delay",
        {
            {"Time", ParamType::LINF, 1.0f, 3000.0f},
            {"Delay", ParamType::ENUM, 4, {"1", "1/2", "2/3", "3/2"}},
            // PDF p87 has Delay enum [1, 1/2, 2/3, 3/2]
            {"Feed", ParamType::LINF, 0.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 200.0f, 20000.0f},
            {"Depth Rate", ParamType::LINF, 0.0f, 100.0f}, // PDF p87 typo "Depth Rate" likely means "Depth"
            {"Rate", ParamType::LOGF, 0.05f, 10.0f},
            {"Setup", ParamType::ENUM, 2, {"PAR", "SER"}},
            {"Type", ParamType::ENUM, 3, {"AMB", "CLUB", "HALL"}},
            {"Decay", ParamType::LINF, 1.0f, 10.0f}, // This seems to be for the Reverb part of Mod Delay
            {"Damping", ParamType::LOGF, 1000.0f, 20000.0f},
            {"Balance", ParamType::LINF, -100.0f, 100.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 28. Dual Graphic Equalizer (GEQ2)
    // Params are 31x Eq Level A, Master Level A, 31x Eq Level B, Master Level B
    // For brevity, will list only first, last of bands and master for each channel
    {
        27, 0, "GEQ2", std::bitset<6>("011000"), "Dual Graphic EQ",
        {
            {"Eq Level A 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level A", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level B", ParamType::LINF, -15.0f, 15.0f}
        }
    },
    // 29. Stereo Graphic Equalizer (GEQ)
    {
        28, 1, "GEQ", std::bitset<6>("010111"), "Stereo Graphic EQ",
        {
            {"Eq Level 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level L/R", ParamType::LINF, -15.0f, 15.0f}
        }
    },
    // 30. Dual TrueEQ (TEQ2)
    {
        29, 2, "TEQ2", std::bitset<6>("011010"), "Dual TrueEQ",
        {
            // Same parameters as GEQ2
            {"Eq Level A 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level A 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level A", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level B 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level B", ParamType::LINF, -15.0f, 15.0f}
        }
    },
    // 31. Stereo TrueEQ (TEQ) - Appendix says "Strereo TrueEQ"
    {
        30, 3, "TEQ", std::bitset<6>("011001"), "Stereo TrueEQ",
        {
            // Same parameters as GEQ
            {"Eq Level 1 (20Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 2 (25Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 3 (31.5Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 4 (40Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 5 (50Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 6 (63Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 7 (80Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 8 (100Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 9 (125Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 10 (160Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 11 (200Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 12 (250Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 13 (315Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 14 (400Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 15 (500Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 16 (630Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 17 (800Hz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 18 (1kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 19 (1.25kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 20 (1.6kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 21 (2kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 22 (2.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 23 (3.15kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 24 (4kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 25 (5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 26 (6.3kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 27 (8kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 28 (10kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 29 (12.5kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 30 (16kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Eq Level 31 (20kHz)", ParamType::LINF, -15.0f, 15.0f},
            {"Master Level L/R", ParamType::LINF, -15.0f, 15.0f}
        }
    },
    // 32. Dual DeEsser (DES2)
    {
        31, 4, "DES2", std::bitset<6>("101011"), "Dual DeEsser",
        {
            {"Lo Band A", ParamType::LINF, 0.0f, 50.0f},
            {"Hi Band A", ParamType::LINF, 0.0f, 50.0f},
            {"Lo Band B", ParamType::LINF, 0.0f, 50.0f},
            {"Hi Band B", ParamType::LINF, 0.0f, 50.0f},
            {"Voice A", ParamType::ENUM, 2, femMaleEnuMap()},
            {"Voice B", ParamType::ENUM, 2, femMaleEnuMap()}
        }
    },
    // 33. Stereo DeEsser (DES)
    {
        32, 5, "DES", std::bitset<6>("101010"), "Stereo DeEsser",
        {
            {"Lo Band L", ParamType::LINF, 0.0f, 50.0f},
            {"Hi Band L", ParamType::LINF, 0.0f, 50.0f},
            {"Lo Band R", ParamType::LINF, 0.0f, 50.0f},
            {"Hi Band R", ParamType::LINF, 0.0f, 50.0f},
            {"Voice", ParamType::ENUM, 2, femMaleEnuMap()},
            {"Mode", ParamType::ENUM, 2, {"ST", "M/S"}}
        }
    },
    // 34. Stereo Xtec EQ1 (P1A) - Pultec EQP-1A emulation
    {
        33, 6, "P1A", std::bitset<6>("101100"), "Stereo Xtec EQ1",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Boost", ParamType::LINF, 0.0f, 10.0f}, // Range based on typical Pultec behavior (arbitrary units)
            {"Lo Freq", ParamType::ENUM, 4, {"0", "30", "60", "100"}},
            // Assuming 0 is '20Hz' or similar lowest setting
            {"Mid Width", ParamType::LINF, 0.0f, 10.0f}, // (Sharp/Broad)
            {"Mid Boost", ParamType::LINF, 0.0f, 10.0f}, // Mid-band boost
            {"Mid Freq", ParamType::ENUM, 7, {"3k", "4k", "5k", "8k", "10k", "12k", "16k"}},
            {"Hi Attenuation", ParamType::LINF, 0.0f, 10.0f}, // Hi shelf atten
            {"Hi Freq", ParamType::ENUM, 3, {"5k", "10k", "20k"}}, // Hi shelf atten freq
            {"Transformer", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 35. Dual Xtec EQ1 (P1A2)
    {
        34, 7, "P1A2", std::bitset<6>("101101"), "Dual Xtec EQ1",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Boost A", ParamType::LINF, 0.0f, 10.0f},
            {"Lo Freq A", ParamType::ENUM, 4, {"0", "30", "60", "100"}},
            {"Mid Width A", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Boost A", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Freq A", ParamType::ENUM, 7, {"3k", "4k", "5k", "8k", "10k", "12k", "16k"}},
            {"Hi Attenuation A", ParamType::LINF, 0.0f, 10.0f},
            {"Hi Freq A", ParamType::ENUM, 3, {"5k", "10k", "20k"}},
            {"Transformer A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Boost B", ParamType::LINF, 0.0f, 10.0f},
            {"Lo Freq B", ParamType::ENUM, 4, {"0", "30", "60", "100"}},
            {"Mid Width B", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Boost B", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Freq B", ParamType::ENUM, 7, {"3k", "4k", "5k", "8k", "10k", "12k", "16k"}},
            {"Hi Attenuation B", ParamType::LINF, 0.0f, 10.0f},
            {"Hi Freq B", ParamType::ENUM, 3, {"5k", "10k", "20k"}},
            {"Transformer B", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 36. Stereo Xtec EQ5 (PQ5) - Pultec MEQ-5 emulation
    {
        35, 8, "PQ5", std::bitset<6>("101110"), "Stereo Xtec EQ5",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq", ParamType::ENUM, 5, {"200", "300", "500", "700", "1000"}},
            // Lo Mid Peak Freq
            {"Lo Boost", ParamType::LINF, 0.0f, 10.0f}, // Lo Mid Peak Boost
            {"Mid Freq", ParamType::ENUM, 11, {"200", "300", "500", "700", "1k", "1k5", "2k", "3k", "4k", "5k", "7k"}}, // Mid Dip Freq
            {"Mid Boost", ParamType::LINF, 0.0f, 10.0f}, // Mid Dip Atten (param name is Boost but it's Atten)
            {"Hi Freq", ParamType::ENUM, 5, {"1k5", "2k", "3k", "4k", "5k"}},
            // Hi Mid Peak Freq
            {"Hi Boost", ParamType::LINF, 0.0f, 10.0f}, // Hi Mid Peak Boost
            {"Transformer", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 37. Dual Xtec EQ5 (PQ5S) - PDF has PQ5S, appendix PQ5S
    {
        36, 9, "PQ5S", std::bitset<6>("101111"), "Dual Xtec EQ5",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq A", ParamType::ENUM, 5, {"200", "300", "500", "700", "1000"}},
            {"Lo Boost A", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Freq A", ParamType::ENUM, 11, {"200", "300", "500", "700", "1k", "1k5", "2k", "3k", "4k", "5k", "7k"}},
            {"Mid Boost A", ParamType::LINF, 0.0f, 10.0f},
            {"Hi Freq A", ParamType::ENUM, 5, {"1k5", "2k", "3k", "4k", "5k"}},
            {"Hi Boost A", ParamType::LINF, 0.0f, 10.0f},
            {"Transformer A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq B", ParamType::ENUM, 5, {"200", "300", "500", "700", "1000"}},
            {"Lo Boost B", ParamType::LINF, 0.0f, 10.0f},
            {"Mid Freq B", ParamType::ENUM, 11, {"200", "300", "500", "700", "1k", "1k5", "2k", "3k", "4k", "5k", "7k"}},
            {"Mid Boost B", ParamType::LINF, 0.0f, 10.0f},
            {"Hi Freq B", ParamType::ENUM, 5, {"1k5", "2k", "3k", "4k", "5k"}},
            {"Hi Boost B", ParamType::LINF, 0.0f, 10.0f},
            {"Transformer B", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 38. Wave Designer (WAVD) - PDF has WAV, appendix WAVD
    {
        37, 10, "WAVD", std::bitset<6>("011101"), "Wave Designer", // PDF p102 has WAV, appendix p124 has WAVD
        {
            {"Attack A", ParamType::LINF, -100.0f, 100.0f},
            {"Sustain A", ParamType::LINF, -100.0f, 100.0f},
            {"Gain A", ParamType::LINF, -24.0f, 24.0f},
            {"Attack B", ParamType::LINF, -100.0f, 100.0f},
            {"Sustain B", ParamType::LINF, -100.0f, 100.0f},
            {"Gain B", ParamType::LINF, -24.0f, 24.0f}
        }
    },
    // 39. Precision Limiter (LIM)
    {
        38, 11, "LIM", std::bitset<6>("011110"), "Precision Limiter",
        {
            {"Input Gain", ParamType::LINF, 0.0f, 18.0f},
            {"Out Gain", ParamType::LINF, -18.0f, 18.0f},
            {"Squeeze", ParamType::LINF, 0.0f, 100.0f},
            {"Knee", ParamType::LINF, 0.0f, 10.0f},
            {"Attack", ParamType::LOGF, 0.05f, 1.0f},
            {"Release", ParamType::LOGF, 20.0f, 2000.0f},
            {"Stereo Link", ParamType::ENUM, 2, onOffEnumMap()},
            {"Auto Gain", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 40. Stereo Combinator (CMB)
    {
        39, -1, "CMB", std::bitset<6>("111011"), "Combinator",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Band Solo", ParamType::ENUM, 6, {"OFF", "Bd1", "Bd2", "Bd3", "Bd4", "Bd5"}},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Attack", ParamType::LINF, 0.0f, 19.0f}, // PDF p92: linf [0...19]
            {"Release", ParamType::LOGF, 20.0f, 3000.0f},
            {"Autorelease", ParamType::ENUM, 2, onOffEnumMap()},
            {"SBC speed", ParamType::LINF, 0.0f, 10.0f},
            {"SBC ON", ParamType::ENUM, 2, onOffEnumMap()},
            {"Xover", ParamType::LINF, -50.0f, 50.0f}, // Crossover Freq Balance
            {"Xover Slope", ParamType::ENUM, 2, {"12", "48"}},
            {"Ratio", ParamType::ENUM, 14,
                {"1.1", "1.2", "1.3", "1.5", "1.7", "2", "2.5", "3", "3.5", "4", "5", "7", "10", "LIM"}},
            {"Threshold", ParamType::LINF, -40.0f, 0.0f}, // Overall Threshold
            {"Gain", ParamType::LINF, -10.0f, 10.0f}, // Overall Gain
            {"Band 1 Threshold", ParamType::LINF, -10.0f, 10.0f}, // Relative Threshold
            {"Band 1 Gain", ParamType::LINF, -10.0f, 10.0f}, // Relative Gain
            {"Band 1 Lock", ParamType::ENUM, 2, {"0", "1"}}, // 0=Unlock, 1=Lock
            {"Band 2 Threshold", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Gain", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Lock", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 3 Threshold", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Gain", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Lock", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 4 Threshold", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Gain", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Lock", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 5 Threshold", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Gain", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Lock", ParamType::ENUM, 2, {"0", "1"}},
            {"Meter Mode", ParamType::ENUM, 3, {"GR", "SBC", "PEAK"}}
        }
    },
    // 41. Dual Combinator (CMB2) - Parameters are doubled from CMB
    {
        40, -1, "CMB2", std::bitset<6>("111100"), "Dual Combinator",
        {
            // Listing only A channel for brevity, B channel would follow
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Band Solo A", ParamType::ENUM, 6, {"OFF", "Bd1", "Bd2", "Bd3", "Bd4", "Bd5"}},
            {"Mix A", ParamType::LINF, 0.0f, 100.0f},
            {"Attack A", ParamType::LINF, 0.0f, 19.0f},
            {"Release A", ParamType::LOGF, 20.0f, 3000.0f},
            {"Autorelease A", ParamType::ENUM, 2, onOffEnumMap()},
            {"SBC speed A", ParamType::LINF, 0.0f, 10.0f},
            {"SBC ON A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Xover A", ParamType::LINF, -50.0f, 50.0f},
            {"Xover Slope A", ParamType::ENUM, 2, {"12", "48"}},
            {"Ratio A", ParamType::ENUM, 14,
                {"1.1", "1.2", "1.3", "1.5", "1.7", "2", "2.5", "3", "3.5", "4", "5", "7", "10", "LIM"}
            },
            {"Threshold A", ParamType::LINF, -40.0f, 0.0f},
            {"Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Threshold A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Lock A", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 2 Threshold A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Lock A", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 3 Threshold A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Lock A", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 4 Threshold A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Lock A", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 5 Threshold A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Gain A", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Lock A", ParamType::ENUM, 2, {"0", "1"}},
            {"Meter Mode A", ParamType::ENUM, 3, {"GR", "SBC", "PEAK"}},
            // ... Parameters for Channel B would follow the same pattern
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Band Solo B", ParamType::ENUM, 6, {"OFF", "Bd1", "Bd2", "Bd3", "Bd4", "Bd5"}},
            {"Mix B", ParamType::LINF, 0.0f, 100.0f},
            {"Attack B", ParamType::LINF, 0.0f, 19.0f},
            {"Release B", ParamType::LOGF, 20.0f, 3000.0f},
            {"Autorelease B", ParamType::ENUM, 2, onOffEnumMap()},
            {"SBC speed B", ParamType::LINF, 0.0f, 10.0f},
            {"SBC ON B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Xover B", ParamType::LINF, -50.0f, 50.0f},
            {"Xover Slope B", ParamType::ENUM, 2, {"12", "48"}},
            {"Ratio B", ParamType::ENUM, 14,
                {"1.1", "1.2", "1.3", "1.5", "1.7", "2", "2.5", "3", "3.5", "4", "5", "7", "10", "LIM"}},
            {"Threshold B", ParamType::LINF, -40.0f, 0.0f},
            {"Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Threshold B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 1 Lock B", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 2 Threshold B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 2 Lock B", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 3 Threshold B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 3 Lock B", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 4 Threshold B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 4 Lock B", ParamType::ENUM, 2, {"0", "1"}},
            {"Band 5 Threshold B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Gain B", ParamType::LINF, -10.0f, 10.0f},
            {"Band 5 Lock B", ParamType::ENUM, 2, {"0", "1"}},
            {"Meter Mode B", ParamType::ENUM, 3, {"GR", "SBC", "PEAK"}}
        }
    },
    // 42. Fair Compressor (FAC)
    {
        41, 12, "FAC", std::bitset<6>("110000"), "Fair Comp",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain", ParamType::LINF, -20.0f, 20.0f},
            {"Threshold", ParamType::LINF, 0.0f, 10.0f}, // Fairchild style threshold/input
            {"Time", ParamType::LINF, 0.0f, 6.0f}, // Time constant settings
            {"Bias", ParamType::LINF, 0.0f, 100.0f},
            {"Gain", ParamType::LINF, -18.0f, 6.0f}, // Output Gain
            {"Balance", ParamType::LINF, -100.0f, 100.0f}
        }
    },
    // 43. M/S Fair Compressor (FAC1M)
    {
        42, 13, "FAC1M", std::bitset<6>("110001"), "M/S Fair Comp",
        {
            // Parameters likely duplicated for Mid and Side, or linked. PDF shows one set.
            // Assuming it means controls for both M and S sections, or global controls for an M/S processed signal
            {"Active", ParamType::ENUM, 2, onOffEnumMap()}, // Global active
            {"Input Gain", ParamType::LINF, -20.0f, 20.0f}, // Applied to input before M/S encoding?
            {"Threshold", ParamType::LINF, 0.0f, 10.0f}, // For M and S path?
            {"Time", ParamType::LINF, 0.0f, 6.0f},
            {"Bias", ParamType::LINF, 0.0f, 100.0f},
            {"Gain", ParamType::LINF, -18.0f, 6.0f}, // Output Gain after M/S decoding?
            {"Balance", ParamType::LINF, -100.0f, 100.0f} // M/S Balance or Stereo Width?
            // For an actual M/S compressor, you'd expect separate Threshold/Time/Gain for Mid and Side.
            // The PDF is sparse here. Assuming global controls as listed.
        }
    },
    // 44. Dual Fair Compressor (FAC2)
    {
        43, 14, "FAC2", std::bitset<6>("110010"), "Dual Fair Comp",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain A", ParamType::LINF, -20.0f, 20.0f},
            {"Threshold A", ParamType::LINF, 0.0f, 10.0f},
            {"Time A", ParamType::LINF, 0.0f, 6.0f},
            {"Bias A", ParamType::LINF, 0.0f, 100.0f},
            {"Gain A", ParamType::LINF, -18.0f, 6.0f},
            {"Balance A", ParamType::LINF, -100.0f, 100.0f}, // Balance A likely unused for mono channel
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain B", ParamType::LINF, -20.0f, 20.0f},
            {"Threshold B", ParamType::LINF, 0.0f, 10.0f},
            {"Time B", ParamType::LINF, 0.0f, 6.0f},
            {"Bias B", ParamType::LINF, 0.0f, 100.0f},
            {"Gain B", ParamType::LINF, -18.0f, 6.0f},
            {"Balance B", ParamType::LINF, -100.0f, 100.0f} // Balance B likely unused for mono channel
        }
    },
    // 45. Leisure Compressor (LEC) - LA-2A Emulation
    {
        44, 15, "LEC", std::bitset<6>("110011"), "Leisure Comp",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain", ParamType::LINF, 0.0f, 100.0f}, // Input Gain / Drive
            {"Peak", ParamType::LINF, 0.0f, 100.0f}, // Peak Reduction
            {"Mode", ParamType::ENUM, 2, {"COMP", "LIM"}}, // Compress or Limit
            {"Output Gain", ParamType::LINF, -18.0f, 6.0f} // PDF p96 names this "Gain"
        }
    },
    // 46. Dual Leisure Compressor (LEC2)
    {
        45, 16, "LEC2", std::bitset<6>("110100"), "Dual Leisure Comp",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Peak A", ParamType::LINF, 0.0f, 100.0f},
            {"Mode A", ParamType::ENUM, 2, {"COMP", "LIM"}},
            {"Output Gain A", ParamType::LINF, -18.0f, 6.0f}, // PDF p96 names this "Gain A"
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Peak B", ParamType::LINF, 0.0f, 100.0f},
            {"Mode B", ParamType::ENUM, 2, {"COMP", "LIM"}},
            {"Output Gain B", ParamType::LINF, -18.0f, 6.0f} // PDF p96 names this "Gain B"
        }
    },
    // 47. Ultimo Compressor (ULC) - 1176 Emulation
    {
        46, 17, "ULC", std::bitset<6>("110101"), "Ultimo Comp",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain", ParamType::LINF, -48.0f, 0.0f}, // Range is usually relative on 1176
            {"Out Gain", ParamType::LINF, -48.0f, 0.0f}, // Range is usually relative
            {"Attack", ParamType::LINF, 1.0f, 7.0f}, // 1176 attack: 1(slow)-7(fast)
            {"Release", ParamType::LINF, 1.0f, 7.0f}, // 1176 release: 1(slow)-7(fast)
            {"Ratio", ParamType::ENUM, 5, {"4", "8", "12", "20", "ALL"}}
        }
    },
    // 48. Dual Ultimo Compressor (ULC2)
    {
        47, 18, "ULC2", std::bitset<6>("110110"), "Dual Ultimo Comp",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain A", ParamType::LINF, -48.0f, 0.0f},
            {"Out Gain A", ParamType::LINF, -48.0f, 0.0f},
            {"Attack A", ParamType::LINF, 1.0f, 7.0f},
            {"Release A", ParamType::LINF, 1.0f, 7.0f},
            {"Ratio A", ParamType::ENUM, 5, {"4", "8", "12", "20", "ALL"}},
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Input Gain B", ParamType::LINF, -48.0f, 0.0f},
            {"Out Gain B", ParamType::LINF, -48.0f, 0.0f},
            {"Attack B", ParamType::LINF, 1.0f, 7.0f},
            {"Release B", ParamType::LINF, 1.0f, 7.0f},
            {"Ratio B", ParamType::ENUM, 5, {"4", "8", "12", "20", "ALL"}}
        }
    },
    // 49. Dual Enhancer (ENH2)
    {
        48, 19, "ENH2", std::bitset<6>("100000"), "Dual Enhancer",
        {
            {"Out Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Speed A", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Freq A", ParamType::LINF, 1.0f, 50.0f}, // Units not specified, assume relative
            {"Mid Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Mid Freq A", ParamType::LINF, 1.0f, 50.0f},
            {"Hi Gain A", ParamType::LINF, 0.0f, 100.0f},
            {"Hi Freq A", ParamType::LINF, 1.0f, 50.0f},
            {"Solo A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Out Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Speed B", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Freq B", ParamType::LINF, 1.0f, 50.0f},
            {"Mid Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Mid Freq B", ParamType::LINF, 1.0f, 50.0f},
            {"Hi Gain B", ParamType::LINF, 0.0f, 100.0f},
            {"Hi Freq B", ParamType::LINF, 1.0f, 50.0f},
            {"Solo B", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 50. Stereo Enhancer (ENH)
    {
        49, 20, "ENH", std::bitset<6>("011111"), "Stereo Enhancer",
        {
            {"Out Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Speed", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Gain", ParamType::LINF, 0.0f, 100.0f},
            {"Bass Freq", ParamType::LINF, 1.0f, 50.0f},
            {"Mid Gain", ParamType::LINF, 0.0f, 100.0f},
            {"Mid Freq", ParamType::LINF, 1.0f, 50.0f},
            {"Hi Gain", ParamType::LINF, 0.0f, 100.0f},
            {"Hi Freq", ParamType::LINF, 1.0f, 50.0f},
            {"Solo", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 51. Dual Exciter (EXC2)
    {
        50, 21, "EXC2", std::bitset<6>("100010"), "Dual Exciter",
        {
            {"Tune A", ParamType::LOGF, 1000.0f, 10000.0f},
            {"Peak A", ParamType::LINF, 0.0f, 100.0f},
            {"Zero Fill A", ParamType::LINF, 0.0f, 100.0f},
            {"Timbre A", ParamType::LINF, -50.0f, 50.0f},
            {"Harmonics A", ParamType::LINF, 0.0f, 100.0f},
            {"Mix A", ParamType::LINF, 0.0f, 100.0f},
            {"Solo A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Tune B", ParamType::LOGF, 1000.0f, 10000.0f},
            {"Peak B", ParamType::LINF, 0.0f, 100.0f},
            {"Zero Fill B", ParamType::LINF, 0.0f, 100.0f},
            {"Timbre B", ParamType::LINF, -50.0f, 50.0f},
            {"Harmonics B", ParamType::LINF, 0.0f, 100.0f},
            {"Mix B", ParamType::LINF, 0.0f, 100.0f},
            {"Solo B", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 52. Stereo Exciter (EXC)
    {
        51, 22, "EXC", std::bitset<6>("100001"), "Stereo Exciter",
        {
            {"Tune", ParamType::LOGF, 1000.0f, 10000.0f},
            {"Peak", ParamType::LINF, 0.0f, 100.0f},
            {"Zero Fill", ParamType::LINF, 0.0f, 100.0f},
            {"Timbre", ParamType::LINF, -50.0f, 50.0f},
            {"Harmonics", ParamType::LINF, 0.0f, 100.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f},
            {"Solo", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 53. Stereo Imager (IMG)
    {
        52, 23, "IMG", std::bitset<6>("100111"), "Stereo Imager",
        {
            {"Balance", ParamType::LINF, -100.0f, 100.0f},
            {"Mono Pan", ParamType::LINF, -100.0f, 100.0f},
            {"Stereo Pan", ParamType::LINF, -100.0f, 100.0f},
            {"Shv Gain", ParamType::LINF, 0.0f, 12.0f}, // Shelving Filter Gain
            {"Shv Freq", ParamType::LOGF, 100.0f, 1000.0f}, // Shelving Filter Freq
            {"Shv Q", ParamType::LOGF, 1.0f, 10.0f}, // Shelving Filter Q
            {"Out Gain", ParamType::LINF, -12.0f, 12.0f}
        }
    },
    // 54. Edison EX1 (EDI)
    {
        53, 24, "EDI", std::bitset<6>("111000"), "Edison EX1",
        {
            {"Active", ParamType::ENUM, 2, onOffEnumMap()},
            {"Stereo Input", ParamType::ENUM, 2, {"ST", "M/S"}},
            {"Stereo Output", ParamType::ENUM, 2, {"ST", "M/S"}},
            {"ST Spread", ParamType::LINF, -50.0f, 50.0f},
            {"LMF Spread", ParamType::LINF, -50.0f, 50.0f}, // Low-Mid Frequency Spread
            {"Balance", ParamType::LINF, -50.0f, 50.0f},
            {"Center Distance", ParamType::LINF, -50.0f, 50.0f},
            {"Out Gain", ParamType::LINF, -12.0f, 12.0f}
        }
    },
    // 55. Sound Maxer (SON) - Sonic Maximizer type effect
    {
        54, 25, "SON", std::bitset<6>("110111"), "Sound Maxer",
        {
            {"Active A", ParamType::ENUM, 2, onOffEnumMap()}, // Assuming Dual Mono (A/B)
            {"Lo Contour A", ParamType::LINF, 0.0f, 10.0f},
            {"Process A", ParamType::LINF, 0.0f, 10.0f}, // Hi Contour / Process
            {"Out Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Active B", ParamType::ENUM, 2, onOffEnumMap()},
            {"Lo Contour B", ParamType::LINF, 0.0f, 10.0f},
            {"Process B", ParamType::LINF, 0.0f, 10.0f},
            {"Out Gain B", ParamType::LINF, -12.0f, 12.0f}
        }
    },
    // 56. Dual Guitar Amp (AMP2)
    {
        55, 26, "AMP2", std::bitset<6>("100100"), "Dual Guitar Amp",
        {
            {"Preamp A", ParamType::LINF, 0.0f, 10.0f},
            {"Buzz A", ParamType::LINF, 0.0f, 10.0f},
            {"Punch A", ParamType::LINF, 0.0f, 10.0f},
            {"Crunch A", ParamType::LINF, 0.0f, 10.0f},
            {"Drive A", ParamType::LINF, 0.0f, 10.0f},
            {"Low A", ParamType::LINF, 0.0f, 10.0f},
            {"High A", ParamType::LINF, 0.0f, 10.0f},
            {"Level A", ParamType::LINF, 0.0f, 10.0f},
            {"Cabinet A", ParamType::ENUM, 2, onOffEnumMap()},
            {"Preamp B", ParamType::LINF, 0.0f, 10.0f},
            {"Buzz B", ParamType::LINF, 0.0f, 10.0f},
            {"Punch B", ParamType::LINF, 0.0f, 10.0f},
            {"Crunch B", ParamType::LINF, 0.0f, 10.0f},
            {"Drive B", ParamType::LINF, 0.0f, 10.0f},
            {"Low B", ParamType::LINF, 0.0f, 10.0f},
            {"High B", ParamType::LINF, 0.0f, 10.0f},
            {"Level B", ParamType::LINF, 0.0f, 10.0f},
            {"Cabinet B", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 57. Stereo Guitar Amp (AMP)
    {
        56, 27, "AMP", std::bitset<6>("100011"), "Stereo Guitar Amp",
        {
            {"Preamp", ParamType::LINF, 0.0f, 10.0f},
            {"Buzz", ParamType::LINF, 0.0f, 10.0f},
            {"Punch", ParamType::LINF, 0.0f, 10.0f},
            {"Crunch", ParamType::LINF, 0.0f, 10.0f},
            {"Drive", ParamType::LINF, 0.0f, 10.0f},
            {"Low", ParamType::LINF, 0.0f, 10.0f},
            {"High", ParamType::LINF, 0.0f, 10.0f},
            {"Level", ParamType::LINF, 0.0f, 10.0f},
            {"Cabinet", ParamType::ENUM, 2, onOffEnumMap()}
        }
    },
    // 58. Dual Tube Stage (DRV2)
    {
        57, 28, "DRV2", std::bitset<6>("100110"), "Dual Tube Stage",
        {
            {"Drive A", ParamType::LINF, 0.0f, 100.0f},
            {"Even Ear A", ParamType::LINF, 0.0f, 50.0f}, // Even Harmonics
            {"Odd Ear A", ParamType::LINF, 0.0f, 50.0f}, // Odd Harmonics
            {"Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut A", ParamType::LOGF, 20.0f, 200.0f},
            {"Hi Cut A", ParamType::LOGF, 4000.0f, 20000.0f},
            {"Lo Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq A", ParamType::LOGF, 50.0f, 400.0f},
            {"Hi Gain A", ParamType::LINF, -12.0f, 12.0f},
            {"Hi Freq A", ParamType::LOGF, 1000.0f, 10000.0f},
            {"Drive B", ParamType::LINF, 0.0f, 100.0f},
            {"Even Ear B", ParamType::LINF, 0.0f, 50.0f},
            {"Odd Ear B", ParamType::LINF, 0.0f, 50.0f},
            {"Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut B", ParamType::LOGF, 20.0f, 200.0f},
            {"Hi Cut B", ParamType::LOGF, 4000.0f, 20000.0f},
            {"Lo Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq B", ParamType::LOGF, 50.0f, 400.0f},
            {"Hi Gain B", ParamType::LINF, -12.0f, 12.0f},
            {"Hi Freq B", ParamType::LOGF, 1000.0f, 10000.0f}
        }
    },
    // 59. Stereo Tube Stage (DRV)
    {
        58, 29, "DRV", std::bitset<6>("100101"), "Stereo Tube Stage",
        {
            {"Drive", ParamType::LINF, 0.0f, 100.0f},
            {"Even Ear", ParamType::LINF, 0.0f, 50.0f},
            {"Odd Ear", ParamType::LINF, 0.0f, 50.0f},
            {"Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Cut", ParamType::LOGF, 20.0f, 200.0f},
            {"Hi Cut", ParamType::LOGF, 4000.0f, 20000.0f},
            {"Lo Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Lo Freq", ParamType::LOGF, 50.0f, 400.0f},
            {"Hi Gain", ParamType::LINF, -12.0f, 12.0f},
            {"Hi Freq", ParamType::LOGF, 1000.0f, 10000.0f}
        }
    },
    // 60. Dual Pitch Shifter (PIT2)
    {
        59, -1, "PIT2", std::bitset<6>("001101"), "Dual Pitch Shifter",
        {
            {"Semitone A", ParamType::LINF, -12.0f, 12.0f},
            {"Cent A", ParamType::LINF, -50.0f, 50.0f},
            {"Delay A", ParamType::LOGF, 1.0f, 100.0f},
            {"Lo Cut A", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut A", ParamType::LOGF, 2000.0f, 20000.0f},
            {"Mix A", ParamType::LINF, 0.0f, 100.0f},
            {"Semitone B", ParamType::LINF, -12.0f, 12.0f},
            {"Cent B", ParamType::LINF, -50.0f, 50.0f},
            {"Delay B", ParamType::LOGF, 1.0f, 100.0f},
            {"Lo Cut B", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut B", ParamType::LOGF, 2000.0f, 20000.0f},
            {"Mix B", ParamType::LINF, 0.0f, 100.0f}
        }
    },
    // 61. Stereo Pitch Shifter (PIT)
    {
        60, -1, "PIT", std::bitset<6>("001100"), "Stereo Pitch",
        {
            {"Semitone", ParamType::LINF, -12.0f, 12.0f},
            {"Cent", ParamType::LINF, -50.0f, 50.0f},
            {"Delay", ParamType::LOGF, 1.0f, 100.0f},
            {"Lo Cut", ParamType::LOGF, 10.0f, 500.0f},
            {"Hi Cut", ParamType::LOGF, 2000.0f, 20000.0f},
            {"Mix", ParamType::LINF, 0.0f, 100.0f}
        }
    }
};
*/